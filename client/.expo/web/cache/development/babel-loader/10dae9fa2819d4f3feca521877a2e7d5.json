{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"variant\", \"theme\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useTheme } from \"../../core/theming\";\nimport { MD3TypescaleKey } from \"../../types\";\n\nvar Text = function Text(_ref, ref) {\n  var style = _ref.style,\n      variant = _ref.variant,\n      initialTheme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var root = React.useRef(null);\n  var theme = useTheme(initialTheme);\n  var writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n  React.useImperativeHandle(ref, function () {\n    return {\n      setNativeProps: function setNativeProps(args) {\n        var _root$current;\n\n        return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.setNativeProps(args);\n      }\n    };\n  });\n\n  if (theme.isV3 && variant) {\n    var stylesByVariant = Object.keys(MD3TypescaleKey).reduce(function (acc, key) {\n      var _theme$typescale$key = theme.typescale[key],\n          fontSize = _theme$typescale$key.fontSize,\n          fontWeight = _theme$typescale$key.fontWeight,\n          lineHeight = _theme$typescale$key.lineHeight,\n          letterSpacing = _theme$typescale$key.letterSpacing,\n          fontFamily = _theme$typescale$key.fontFamily;\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, _objectSpread(_objectSpread({}, Platform.OS === 'android' && {\n        fontFamily: fontFamily\n      }), {}, {\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        lineHeight: lineHeight,\n        letterSpacing: letterSpacing,\n        color: theme.colors.onSurface\n      })));\n    }, {});\n    var styleForVariant = stylesByVariant[variant];\n    return React.createElement(NativeText, _extends({\n      ref: root,\n      style: [styleForVariant, styles.text, {\n        writingDirection: writingDirection\n      }, style]\n    }, rest));\n  } else {\n    var _theme$fonts, _theme$colors;\n\n    return React.createElement(NativeText, _extends({}, rest, {\n      ref: root,\n      style: [_objectSpread(_objectSpread({}, !theme.isV3 && ((_theme$fonts = theme.fonts) === null || _theme$fonts === void 0 ? void 0 : _theme$fonts.regular)), {}, {\n        color: theme.isV3 ? (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.onSurface : theme.colors.text\n      }), styles.text, style]\n    }));\n  }\n};\n\nvar styles = StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\nexport default React.forwardRef(Text);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AASA,SAASC,QAAT;AACA,SAAeC,eAAf;;AAqEA,IAAMC,IAA+C,GAAG,SAAlDA,IAAkD,OAEtDC,GAFsD,EAGnD;EAAA,IAFDC,KAEC,QAFDA,KAEC;EAAA,IAFMC,OAEN,QAFMA,OAEN;EAAA,IAFsBC,YAEtB,QAFeC,KAEf;EAAA,IAFuCC,IAEvC;;EACH,IAAMC,IAAI,GAAGV,KAAK,CAACW,MAANX,CAAgC,IAAhCA,CAAb;EAEA,IAAMQ,KAAK,GAAGP,QAAQ,CAACM,YAAD,CAAtB;EACA,IAAMK,gBAAgB,GAAGC,WAAW,CAACC,KAAZD,GAAoB,KAApBA,GAA4B,KAArD;EAEAb,KAAK,CAACe,mBAANf,CAA0BI,GAA1BJ,EAA+B;IAAA,OAAO;MACpCgB,cAAc,EAAGC,4BAAD;QAAA;;QAAA,wBAAkBP,IAAI,CAACQ,OAAvB,kDAAkBC,cAAcH,cAAd,CAA6BC,IAA7B,CAAlB;MAAA;IADoB,CAAP;EAAA,CAA/BjB;;EAIA,IAAIQ,KAAK,CAACY,IAANZ,IAAcF,OAAlB,EAA2B;IACzB,IAAMe,eAAe,GAAGC,MAAM,CAACC,IAAPD,CAAYpB,eAAZoB,EAA6BE,MAA7BF,CACtB,UAACG,GAAD,EAAMC,GAAN,EAAc;MACZ,2BACElB,KAAK,CAACmB,SAANnB,CAAgBkB,GAAhBlB,CADF;MAAA,IAAQoB,QAAR,wBAAQA,QAAR;MAAA,IAAkBC,UAAlB,wBAAkBA,UAAlB;MAAA,IAA8BC,UAA9B,wBAA8BA,UAA9B;MAAA,IAA0CC,aAA1C,wBAA0CA,aAA1C;MAAA,IAAyDC,UAAzD,wBAAyDA,UAAzD;MAGA,uCACKP,GADL,2BAEGC,GAFH,kCAGQO,QAAQ,CAACC,EAATD,KAAgB,SAAhBA,IAA6B;QAAED;MAAF,CAHrC;QAIIJ,QAFK,EAELA,QAJJ;QAKIC,UAHK,EAGLA,UALJ;QAMIC,UAJK,EAILA,UANJ;QAOIC,aALK,EAKLA,aAPJ;QAQII,KAAK,EAAE3B,KAAK,CAAC4B,MAAN5B,CAAa6B;MARxB;IALoB,GAiBtB,EAjBsBf,CAAxB;IA2BA,IAAMgB,eAAe,GAAGjB,eAAe,CAACf,OAAD,CAAvC;IAEA,OACEN,oBAACuC,UAAD;MACEnC,GAAG,EAAEM,IADP;MAEEL,KAAK,EAAE,CAACiC,eAAD,EAAkBE,MAAM,CAACC,IAAzB,EAA+B;QAAE7B;MAAF,CAA/B,EAAqDP,KAArD;IAFT,GAGMI,IAHN,EADF;EA9BF,OAqCO;IAAA;;IACL,OACET,oBAACuC,UAAD,eACM9B,IADN;MAEEL,GAAG,EAAEM,IAFP;MAGEL,KAAK,EAAE,iCAEC,CAACG,KAAK,CAACY,IAAP,qBAAeZ,KAAK,CAACkC,KAArB,iDAAeC,aAAaC,OAA5B,CAFD;QAGHT,KAAK,EAAE3B,KAAK,CAACY,IAANZ,oBAAaA,KAAK,CAAC4B,MAAnB,kDAAaS,cAAcR,SAA3B7B,GAAuCA,KAAK,CAAC4B,MAAN5B,CAAaiC;MAHxD,IAKLD,MAAM,CAACC,IALF,EAMLpC,KANK;IAHT,GADF;EAcD;AAjEH;;AAoEA,IAAMmC,MAAM,GAAGM,UAAU,CAACC,MAAXD,CAAkB;EAC/BL,IAAI,EAAE;IACJO,SAAS,EAAE;EADP;AADyB,CAAlBF,CAAf;AAMA,eAAe9C,KAAK,CAACiD,UAANjD,CAAiBG,IAAjBH,CAAf","names":["React","useTheme","MD3TypescaleKey","Text","ref","style","variant","initialTheme","theme","rest","root","useRef","writingDirection","I18nManager","isRTL","useImperativeHandle","setNativeProps","args","current","_root$current","isV3","stylesByVariant","Object","keys","reduce","acc","key","typescale","fontSize","fontWeight","lineHeight","letterSpacing","fontFamily","Platform","OS","color","colors","onSurface","styleForVariant","NativeText","styles","text","fonts","_theme$fonts","regular","_theme$colors","StyleSheet","create","textAlign","forwardRef"],"sources":["Text.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Text as NativeText,\n  TextStyle,\n  StyleProp,\n  StyleSheet,\n  I18nManager,\n  Platform,\n} from 'react-native';\nimport { useTheme } from '../../core/theming';\nimport { Font, MD3TypescaleKey, ThemeProp } from '../../types';\n\nexport type Props = React.ComponentProps<typeof NativeText> & {\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  variant?: keyof typeof MD3TypescaleKey;\n  children: React.ReactNode;\n  theme?: ThemeProp;\n  style?: StyleProp<TextStyle>;\n};\n\n// @component-group Typography\n\n/**\n * Typography component showing styles complied with passed `variant` prop and supported by the type system.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/typography.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <>\n *     <Text variant=\"displayLarge\">Display Large</Text>\n *     <Text variant=\"displayMedium\">Display Medium</Text>\n *     <Text variant=\"displaySmall\">Display small</Text>\n *\n *     <Text variant=\"headlineLarge\">Headline Large</Text>\n *     <Text variant=\"headlineMedium\">Headline Medium</Text>\n *     <Text variant=\"headlineSmall\">Headline Small</Text>\n *\n *     <Text variant=\"titleLarge\">Title Large</Text>\n *     <Text variant=\"titleMedium\">Title Medium</Text>\n *     <Text variant=\"titleSmall\">Title Small</Text>\n *\n *     <Text variant=\"bodyLarge\">Body Large</Text>\n *     <Text variant=\"bodyMedium\">Body Medium</Text>\n *     <Text variant=\"bodySmall\">Body Small</Text>\n *\n *     <Text variant=\"labelLarge\">Label Large</Text>\n *     <Text variant=\"labelMedium\">Label Medium</Text>\n *     <Text variant=\"labelSmall\">Label Small</Text>\n *  </>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\n\nconst Text: React.ForwardRefRenderFunction<{}, Props> = (\n  { style, variant, theme: initialTheme, ...rest }: Props,\n  ref\n) => {\n  const root = React.useRef<NativeText | null>(null);\n  // FIXME: destructure it in TS 4.6+\n  const theme = useTheme(initialTheme);\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  React.useImperativeHandle(ref, () => ({\n    setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n  }));\n\n  if (theme.isV3 && variant) {\n    const stylesByVariant = Object.keys(MD3TypescaleKey).reduce(\n      (acc, key) => {\n        const { fontSize, fontWeight, lineHeight, letterSpacing, fontFamily } =\n          theme.typescale[key as keyof typeof MD3TypescaleKey];\n\n        return {\n          ...acc,\n          [key]: {\n            ...(Platform.OS === 'android' && { fontFamily }),\n            fontSize,\n            fontWeight,\n            lineHeight,\n            letterSpacing,\n            color: theme.colors.onSurface,\n          },\n        };\n      },\n      {} as {\n        [key in MD3TypescaleKey]: {\n          fontSize: number;\n          fontWeight: Font['fontWeight'];\n          lineHeight: number;\n          letterSpacing: number;\n        };\n      }\n    );\n\n    const styleForVariant = stylesByVariant[variant];\n\n    return (\n      <NativeText\n        ref={root}\n        style={[styleForVariant, styles.text, { writingDirection }, style]}\n        {...rest}\n      />\n    );\n  } else {\n    return (\n      <NativeText\n        {...rest}\n        ref={root}\n        style={[\n          {\n            ...(!theme.isV3 && theme.fonts?.regular),\n            color: theme.isV3 ? theme.colors?.onSurface : theme.colors.text,\n          },\n          styles.text,\n          style,\n        ]}\n      />\n    );\n  }\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default React.forwardRef(Text);\n"]},"metadata":{},"sourceType":"module"}