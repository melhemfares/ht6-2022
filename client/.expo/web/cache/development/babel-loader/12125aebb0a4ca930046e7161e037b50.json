{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"dark\", \"style\", \"theme\", \"mode\", \"elevated\", \"safeAreaInsets\"],\n    _excluded2 = [\"backgroundColor\", \"elevation\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport AppbarContent from \"./AppbarContent\";\nimport AppbarAction from \"./AppbarAction\";\nimport AppbarBackAction from \"./AppbarBackAction\";\nimport Surface from \"../Surface\";\nimport { withTheme } from \"../../core/theming\";\nimport { getAppbarColor, renderAppbarContent, DEFAULT_APPBAR_HEIGHT, modeAppbarHeight } from \"./utils\";\nimport AppbarHeader from \"./AppbarHeader\";\n\nvar Appbar = function Appbar(_ref) {\n  var children = _ref.children,\n      dark = _ref.dark,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'small' : _ref$mode,\n      elevated = _ref.elevated,\n      safeAreaInsets = _ref.safeAreaInsets,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var isV3 = theme.isV3;\n\n  var _ref2 = StyleSheet.flatten(style) || {},\n      customBackground = _ref2.backgroundColor,\n      _ref2$elevation = _ref2.elevation,\n      elevation = _ref2$elevation === void 0 ? isV3 ? elevated ? 2 : 0 : 4 : _ref2$elevation,\n      restStyle = _objectWithoutProperties(_ref2, _excluded2);\n\n  var isDark;\n  var backgroundColor = getAppbarColor(theme, elevation, customBackground, elevated);\n\n  var isMode = function isMode(modeToCompare) {\n    return isV3 && mode === modeToCompare;\n  };\n\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark = backgroundColor === 'transparent' ? false : typeof backgroundColor === 'string' ? !color(backgroundColor).isLight() : true;\n  }\n\n  var isV3CenterAlignedMode = isV3 && isMode('center-aligned');\n  var shouldCenterContent = false;\n  var shouldAddLeftSpacing = false;\n  var shouldAddRightSpacing = false;\n\n  if (!isV3 && Platform.OS === 'ios' || isV3CenterAlignedMode) {\n    var hasAppbarContent = false;\n    var leftItemsCount = 0;\n    var rightItemsCount = 0;\n    React.Children.forEach(children, function (child) {\n      if (React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n    shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < (isV3 ? 3 : 2);\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n\n  var filterAppbarActions = React.useCallback(function () {\n    var isLeading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return React.Children.toArray(children).filter(function (child) {\n      return isLeading ? child.props.isLeading : !child.props.isLeading;\n    });\n  }, [children]);\n  var spacingStyle = isV3 ? styles.v3Spacing : styles.spacing;\n  var insets = {\n    paddingBottom: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom,\n    paddingTop: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.top,\n    paddingLeft: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left,\n    paddingRight: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right\n  };\n  return React.createElement(Surface, _extends({\n    style: [{\n      backgroundColor: backgroundColor\n    }, styles.appbar, {\n      height: isV3 ? modeAppbarHeight[mode] : DEFAULT_APPBAR_HEIGHT\n    }, insets, restStyle, !theme.isV3 && {\n      elevation: elevation\n    }],\n    elevation: elevation\n  }, rest), shouldAddLeftSpacing ? React.createElement(View, {\n    style: spacingStyle\n  }) : null, (!isV3 || isMode('small') || isMode('center-aligned')) && renderAppbarContent({\n    children: children,\n    isDark: isDark,\n    isV3: isV3,\n    shouldCenterContent: isV3CenterAlignedMode || shouldCenterContent\n  }), (isMode('medium') || isMode('large')) && React.createElement(View, {\n    style: [styles.columnContainer, isMode('center-aligned') && styles.centerAlignedContainer]\n  }, React.createElement(View, {\n    style: styles.controlsRow\n  }, renderAppbarContent({\n    children: children,\n    isDark: isDark,\n    isV3: isV3,\n    renderOnly: [AppbarBackAction],\n    mode: mode\n  }), renderAppbarContent({\n    children: filterAppbarActions(true),\n    isDark: isDark,\n    isV3: isV3,\n    renderOnly: [AppbarAction],\n    mode: mode\n  }), React.createElement(View, {\n    style: styles.rightActionControls\n  }, renderAppbarContent({\n    children: filterAppbarActions(false),\n    isDark: isDark,\n    isV3: isV3,\n    renderExcept: [Appbar, AppbarBackAction, AppbarContent, AppbarHeader],\n    mode: mode\n  }))), renderAppbarContent({\n    children: children,\n    isDark: isDark,\n    isV3: isV3,\n    renderOnly: [AppbarContent],\n    mode: mode\n  })), shouldAddRightSpacing ? React.createElement(View, {\n    style: spacingStyle\n  }) : null);\n};\n\nvar styles = StyleSheet.create({\n  appbar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4\n  },\n  spacing: {\n    width: 48\n  },\n  v3Spacing: {\n    width: 52\n  },\n  controlsRow: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between'\n  },\n  rightActionControls: {\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'flex-end'\n  },\n  columnContainer: {\n    flexDirection: 'column',\n    flex: 1,\n    paddingTop: 8\n  },\n  centerAlignedContainer: {\n    paddingTop: 0\n  }\n});\nexport default withTheme(Appbar);\nvar AppbarWithTheme = withTheme(Appbar);\nexport { AppbarWithTheme as Appbar };","map":{"version":3,"sources":["Appbar.tsx"],"names":["Appbar","mode","rest","isV3","backgroundColor","elevation","elevated","restStyle","StyleSheet","getAppbarColor","isMode","modeToCompare","isDark","color","isV3CenterAlignedMode","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","Platform","hasAppbarContent","leftItemsCount","rightItemsCount","React","child","filterAppbarActions","isLeading","spacingStyle","styles","insets","paddingBottom","safeAreaInsets","paddingTop","paddingLeft","paddingRight","right","height","modeAppbarHeight","DEFAULT_APPBAR_HEIGHT","theme","renderAppbarContent","children","controlsRow","renderOnly","rightActionControls","renderExcept","appbar","flexDirection","alignItems","paddingHorizontal","spacing","width","v3Spacing","flex","justifyContent","columnContainer","centerAlignedContainer","withTheme","AppbarWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, Platform, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\n\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport type { MD3Elevation, Theme } from '../../types';\nimport {\n  getAppbarColor,\n  renderAppbarContent,\n  DEFAULT_APPBAR_HEIGHT,\n  modeAppbarHeight,\n  AppbarModes,\n} from './utils';\nimport AppbarHeader from './AppbarHeader';\n\nexport type Props = Partial<React.ComponentPropsWithRef<typeof View>> & {\n  /**\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Content of the `Appbar`.\n   */\n  children: React.ReactNode;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Mode of the Appbar.\n   * - `small` - Appbar with default height (64).\n   * - `medium` - Appbar with medium height (112).\n   * - `large` - Appbar with large height (152).\n   * - `center-aligned` - Appbar with default height and center-aligned title.\n   */\n  mode?: 'small' | 'medium' | 'large' | 'center-aligned';\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether Appbar background should have the elevation along with primary color pigment.\n   */\n  elevated?: boolean;\n  /**\n   * @supported Available in v5.x\n   * Safe area insets for the Appbar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   */\n  safeAreaInsets?: {\n    bottom?: number;\n    top?: number;\n    left?: number;\n    right?: number;\n  };\n  /**\n   * @optional\n   */\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ### Top bar\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Appbar.Header>\n *     <Appbar.BackAction onPress={() => {}} />\n *     <Appbar.Content title=\"Title\" />\n *     <Appbar.Action icon=\"calendar\" onPress={() => {}} />\n *     <Appbar.Action icon=\"magnify\" onPress={() => {}} />\n *   </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * ### Bottom bar\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { Appbar, FAB, useTheme } from 'react-native-paper';\n * import { useSafeAreaInsets } from 'react-native-safe-area-context';\n *\n * const BOTTOM_APPBAR_HEIGHT = 80;\n * const MEDIUM_FAB_HEIGHT = 56;\n *\n * const MyComponent = () => {\n *   const { bottom } = useSafeAreaInsets();\n *   const theme = useTheme();\n *\n *   return (\n *     <Appbar\n *       style={[\n *         styles.bottom,\n *         {\n *           height: BOTTOM_APPBAR_HEIGHT + bottom,\n *           backgroundColor: theme.colors.elevation.level2,\n *         },\n *       ]}\n *       safeAreaInsets={{ bottom }}\n *     >\n *       <Appbar.Action icon=\"archive\" onPress={() => {}} />\n *       <Appbar.Action icon=\"email\" onPress={() => {}} />\n *       <Appbar.Action icon=\"label\" onPress={() => {}} />\n *       <Appbar.Action icon=\"delete\" onPress={() => {}} />\n *       <FAB\n *         mode=\"flat\"\n *         size=\"medium\"\n *         icon=\"plus\"\n *         onPress={() => {}}\n *         style={[\n *           styles.fab,\n *           { top: (BOTTOM_APPBAR_HEIGHT - MEDIUM_FAB_HEIGHT) / 2 },\n *         ]}\n *       />\n *     </Appbar>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     backgroundColor: 'aquamarine',\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n *   fab: {\n *     position: 'absolute',\n *     right: 16,\n *   },\n * });\n *\n * export default MyComponent;\n * ```\n */\nconst Appbar = ({\n  children,\n  dark,\n  style,\n  theme,\n  mode = 'small',\n  elevated,\n  safeAreaInsets,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n  const {\n    backgroundColor: customBackground,\n    elevation = isV3 ? (elevated ? 2 : 0) : 4,\n    ...restStyle\n  }: ViewStyle = StyleSheet.flatten(style) || {};\n\n  let isDark: boolean;\n\n  const backgroundColor = getAppbarColor(\n    theme,\n    elevation,\n    customBackground,\n    elevated\n  );\n\n  const isMode = (modeToCompare: AppbarModes) => {\n    return isV3 && mode === modeToCompare;\n  };\n\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark =\n      backgroundColor === 'transparent'\n        ? false\n        : typeof backgroundColor === 'string'\n        ? !color(backgroundColor).isLight()\n        : true;\n  }\n\n  const isV3CenterAlignedMode = isV3 && isMode('center-aligned');\n\n  let shouldCenterContent = false;\n  let shouldAddLeftSpacing = false;\n  let shouldAddRightSpacing = false;\n  if ((!isV3 && Platform.OS === 'ios') || isV3CenterAlignedMode) {\n    let hasAppbarContent = false;\n    let leftItemsCount = 0;\n    let rightItemsCount = 0;\n\n    React.Children.forEach(children, (child) => {\n      if (React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n\n    shouldCenterContent =\n      hasAppbarContent &&\n      leftItemsCount < 2 &&\n      rightItemsCount < (isV3 ? 3 : 2);\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n\n  const filterAppbarActions = React.useCallback(\n    (isLeading = false) =>\n      React.Children.toArray(children).filter((child) =>\n        // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n        isLeading ? child.props.isLeading : !child.props.isLeading\n      ),\n    [children]\n  );\n\n  const spacingStyle = isV3 ? styles.v3Spacing : styles.spacing;\n\n  const insets = {\n    paddingBottom: safeAreaInsets?.bottom,\n    paddingTop: safeAreaInsets?.top,\n    paddingLeft: safeAreaInsets?.left,\n    paddingRight: safeAreaInsets?.right,\n  };\n\n  return (\n    <Surface\n      style={[\n        { backgroundColor },\n        styles.appbar,\n        {\n          height: isV3 ? modeAppbarHeight[mode] : DEFAULT_APPBAR_HEIGHT,\n        },\n        insets,\n        restStyle,\n        !theme.isV3 && { elevation },\n      ]}\n      elevation={elevation as MD3Elevation}\n      {...rest}\n    >\n      {shouldAddLeftSpacing ? <View style={spacingStyle} /> : null}\n      {(!isV3 || isMode('small') || isMode('center-aligned')) &&\n        renderAppbarContent({\n          children,\n          isDark,\n          isV3,\n          shouldCenterContent: isV3CenterAlignedMode || shouldCenterContent,\n        })}\n      {(isMode('medium') || isMode('large')) && (\n        <View\n          style={[\n            styles.columnContainer,\n            isMode('center-aligned') && styles.centerAlignedContainer,\n          ]}\n        >\n          {/* Appbar top row with controls */}\n          <View style={styles.controlsRow}>\n            {/* Left side of row container, can contain AppbarBackAction or AppbarAction if it's leading icon  */}\n            {renderAppbarContent({\n              children,\n              isDark,\n              isV3,\n              renderOnly: [AppbarBackAction],\n              mode,\n            })}\n            {renderAppbarContent({\n              children: filterAppbarActions(true),\n              isDark,\n              isV3,\n              renderOnly: [AppbarAction],\n              mode,\n            })}\n            {/* Right side of row container, can contain other AppbarAction if they are not leading icons */}\n            <View style={styles.rightActionControls}>\n              {renderAppbarContent({\n                children: filterAppbarActions(false),\n                isDark,\n                isV3,\n                renderExcept: [\n                  Appbar,\n                  AppbarBackAction,\n                  AppbarContent,\n                  AppbarHeader,\n                ],\n                mode,\n              })}\n            </View>\n          </View>\n          {/* Middle of the row, can contain only AppbarContent */}\n          {renderAppbarContent({\n            children,\n            isDark,\n            isV3,\n            renderOnly: [AppbarContent],\n            mode,\n          })}\n        </View>\n      )}\n      {shouldAddRightSpacing ? <View style={spacingStyle} /> : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  appbar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n  },\n  spacing: {\n    width: 48,\n  },\n  v3Spacing: {\n    width: 52,\n  },\n  controlsRow: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  rightActionControls: {\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'flex-end',\n  },\n  columnContainer: {\n    flexDirection: 'column',\n    flex: 1,\n    paddingTop: 8,\n  },\n  centerAlignedContainer: {\n    paddingTop: 0,\n  },\n});\n\nexport default withTheme(Appbar);\n\n// @component-docs ignore-next-line\nconst AppbarWithTheme = withTheme(Appbar);\n// @component-docs ignore-next-line\nexport { AppbarWithTheme as Appbar };\n"]},"metadata":{},"sourceType":"module"}