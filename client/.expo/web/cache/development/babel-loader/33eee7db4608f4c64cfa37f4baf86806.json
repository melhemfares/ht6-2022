{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"theme\", \"variant\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { withTheme } from \"../../core/theming\";\nimport { MD3TypescaleKey } from \"../../types\";\n\nfunction AnimatedText(_ref) {\n  var style = _ref.style,\n      theme = _ref.theme,\n      variant = _ref.variant,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  if (theme.isV3 && variant) {\n    var stylesByVariant = Object.keys(MD3TypescaleKey).reduce(function (acc, key) {\n      var _theme$typescale$key = theme.typescale[key],\n          fontSize = _theme$typescale$key.fontSize,\n          fontWeight = _theme$typescale$key.fontWeight,\n          lineHeight = _theme$typescale$key.lineHeight,\n          letterSpacing = _theme$typescale$key.letterSpacing,\n          fontFamily = _theme$typescale$key.fontFamily;\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, _objectSpread(_objectSpread({}, Platform.OS === 'android' && {\n        fontFamily: fontFamily\n      }), {}, {\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        lineHeight: lineHeight,\n        letterSpacing: letterSpacing,\n        color: theme.colors.onSurface\n      })));\n    }, {});\n    var styleForVariant = stylesByVariant[variant];\n    return React.createElement(Animated.Text, _extends({}, rest, {\n      style: [styleForVariant, styles.text, {\n        writingDirection: writingDirection\n      }, style]\n    }));\n  } else {\n    return React.createElement(Animated.Text, _extends({}, rest, {\n      style: [styles.text, _objectSpread(_objectSpread({}, !theme.isV3 && theme.fonts.regular), {}, {\n        color: theme.isV3 ? theme.colors.onSurface : theme.colors.text,\n        writingDirection: writingDirection\n      }), style]\n    }));\n  }\n}\n\nvar styles = StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\nexport default withTheme(AnimatedText);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AASA,SAASC,SAAT;AACA,SAAeC,eAAf;;AA8BA,SAASC,YAAT,OAAiE;EAAA,IAAzCC,KAAyC,QAAzCA,KAAyC;EAAA,IAAlCC,KAAkC,QAAlCA,KAAkC;EAAA,IAA3BC,OAA2B,QAA3BA,OAA2B;EAAA,IAAfC,IAAe;;EAC/D,IAAMC,gBAAgB,GAAGC,WAAW,CAACC,KAAZD,GAAoB,KAApBA,GAA4B,KAArD;;EAEA,IAAIJ,KAAK,CAACM,IAANN,IAAcC,OAAlB,EAA2B;IACzB,IAAMM,eAAe,GAAGC,MAAM,CAACC,IAAPD,CAAYX,eAAZW,EAA6BE,MAA7BF,CACtB,UAACG,GAAD,EAAMC,GAAN,EAAc;MACZ,2BACEZ,KAAK,CAACa,SAANb,CAAgBY,GAAhBZ,CADF;MAAA,IAAQc,QAAR,wBAAQA,QAAR;MAAA,IAAkBC,UAAlB,wBAAkBA,UAAlB;MAAA,IAA8BC,UAA9B,wBAA8BA,UAA9B;MAAA,IAA0CC,aAA1C,wBAA0CA,aAA1C;MAAA,IAAyDC,UAAzD,wBAAyDA,UAAzD;MAGA,uCACKP,GADL,2BAEGC,GAFH,kCAGQO,QAAQ,CAACC,EAATD,KAAgB,SAAhBA,IAA6B;QAAED;MAAF,CAHrC;QAIIJ,QAFK,EAELA,QAJJ;QAKIC,UAHK,EAGLA,UALJ;QAMIC,UAAU,EAAEA,UANhB;QAOIC,aALK,EAKLA,aAPJ;QAQII,KAAK,EAAErB,KAAK,CAACsB,MAANtB,CAAauB;MARxB;IALoB,GAiBtB,EAjBsBf,CAAxB;IA2BA,IAAMgB,eAAe,GAAGjB,eAAe,CAACN,OAAD,CAAvC;IAEA,OACEN,oBAAC8B,QAAD,CAAUC,IAAV,eACMxB,IADN;MAEEH,KAAK,EAAE,CAACyB,eAAD,EAAkBG,MAAM,CAACC,IAAzB,EAA+B;QAAEzB;MAAF,CAA/B,EAAqDJ,KAArD;IAFT,GADF;EA9BF,OAoCO;IACL,OACEJ,oBAAC8B,QAAD,CAAUC,IAAV,eACMxB,IADN;MAEEH,KAAK,EAAE,CACL4B,MAAM,CAACC,IADF,kCAGC,CAAC5B,KAAK,CAACM,IAAP,IAAeN,KAAK,CAAC6B,KAAN7B,CAAY8B,OAH5B;QAIHT,KAAK,EAAErB,KAAK,CAACM,IAANN,GAAaA,KAAK,CAACsB,MAANtB,CAAauB,SAA1BvB,GAAsCA,KAAK,CAACsB,MAANtB,CAAa4B,IAJvD;QAKHzB;MALG,IAOLJ,KAPK;IAFT,GADF;EAcD;AACF;;AAED,IAAM4B,MAAM,GAAGI,UAAU,CAACC,MAAXD,CAAkB;EAC/BH,IAAI,EAAE;IACJK,SAAS,EAAE;EADP;AADyB,CAAlBF,CAAf;AAMA,eAAenC,SAAS,CAACE,YAAD,CAAxB","names":["React","withTheme","MD3TypescaleKey","AnimatedText","style","theme","variant","rest","writingDirection","I18nManager","isRTL","isV3","stylesByVariant","Object","keys","reduce","acc","key","typescale","fontSize","fontWeight","lineHeight","letterSpacing","fontFamily","Platform","OS","color","colors","onSurface","styleForVariant","Animated","Text","styles","text","fonts","regular","StyleSheet","create","textAlign"],"sources":["AnimatedText.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextStyle,\n  I18nManager,\n  StyleProp,\n  StyleSheet,\n  Platform,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { Font, MD3TypescaleKey, Theme } from '../../types';\n\ntype Props = React.ComponentPropsWithRef<typeof Animated.Text> & {\n  /**\n   * Variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  variant?: keyof typeof MD3TypescaleKey;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Animated text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nfunction AnimatedText({ style, theme, variant, ...rest }: Props) {\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  if (theme.isV3 && variant) {\n    const stylesByVariant = Object.keys(MD3TypescaleKey).reduce(\n      (acc, key) => {\n        const { fontSize, fontWeight, lineHeight, letterSpacing, fontFamily } =\n          theme.typescale[key as keyof typeof MD3TypescaleKey];\n\n        return {\n          ...acc,\n          [key]: {\n            ...(Platform.OS === 'android' && { fontFamily }),\n            fontSize,\n            fontWeight,\n            lineHeight: lineHeight,\n            letterSpacing,\n            color: theme.colors.onSurface,\n          },\n        };\n      },\n      {} as {\n        [key in MD3TypescaleKey]: {\n          fontSize: number;\n          fontWeight: Font['fontWeight'];\n          lineHeight: number;\n          letterSpacing: number;\n        };\n      }\n    );\n\n    const styleForVariant = stylesByVariant[variant];\n\n    return (\n      <Animated.Text\n        {...rest}\n        style={[styleForVariant, styles.text, { writingDirection }, style]}\n      />\n    );\n  } else {\n    return (\n      <Animated.Text\n        {...rest}\n        style={[\n          styles.text,\n          {\n            ...(!theme.isV3 && theme.fonts.regular),\n            color: theme.isV3 ? theme.colors.onSurface : theme.colors.text,\n            writingDirection,\n          },\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(AnimatedText);\n"]},"metadata":{},"sourceType":"module"}