{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"leftInset\", \"horizontalInset\", \"style\", \"theme\", \"bold\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport color from 'color';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withTheme } from \"../core/theming\";\nimport { black, white } from \"../styles/themes/v2/colors\";\n\nvar Divider = function Divider(_ref) {\n  var leftInset = _ref.leftInset,\n      _ref$horizontalInset = _ref.horizontalInset,\n      horizontalInset = _ref$horizontalInset === void 0 ? false : _ref$horizontalInset,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$bold = _ref.bold,\n      bold = _ref$bold === void 0 ? false : _ref$bold,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var isDarkTheme = theme.dark,\n      isV3 = theme.isV3;\n  var dividerColor = isV3 ? theme.colors.surfaceVariant : color(isDarkTheme ? white : black).alpha(0.12).rgb().string();\n  return React.createElement(View, _extends({}, rest, {\n    style: [{\n      height: StyleSheet.hairlineWidth,\n      backgroundColor: dividerColor\n    }, leftInset && styles.leftInset, isV3 && horizontalInset && styles.horizontalInset, isV3 && bold && styles.bold, style]\n  }));\n};\n\nvar styles = StyleSheet.create({\n  leftInset: {\n    marginLeft: 72\n  },\n  horizontalInset: {\n    marginLeft: 28,\n    marginRight: 28\n  },\n  bold: {\n    height: 1\n  }\n});\nexport default withTheme(Divider);","map":{"version":3,"sources":["Divider.tsx"],"names":["Divider","horizontalInset","bold","rest","dark","isV3","dividerColor","theme","color","isDarkTheme","height","StyleSheet","backgroundColor","leftInset","styles","marginLeft","marginRight","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,KAAA,MAAA,OAAA;;;AAEA,SAAA,SAAA;AACA,SAAA,KAAA,EAAA,KAAA;;AAqDA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAAA,IAAA,EAOH;EAPI,IAAA,SAAA,GAOJ,IAPI,CAAA,SAAA;EAAA,2BAOJ,IAPI,CAEfC,eAFe;EAAA,IAEfA,eAFe,qCAAA,KAAA;EAAA,IAAA,KAAA,GAOJ,IAPI,CAAA,KAAA;EAAA,IAAA,KAAA,GAOJ,IAPI,CAAA,KAAA;EAAA,gBAOJ,IAPI,CAKfC,IALe;EAAA,IAKfA,IALe,0BAAA,KAAA;EAAA,IAMZC,IANY,4BAOJ,IAPI;;EAQf,IAAM,WAAN,GAAA,KAAA,CAAQC,IAAR;EAAA,IAA2BC,IAA3B,GAAA,KAAA,CAA2BA,IAA3B;EAEA,IAAMC,YAAY,GAAGD,IAAI,GACrBE,KAAK,CAALA,MAAAA,CADqB,cAAA,GAErBC,KAAK,CAACC,WAAW,GAAA,KAAA,GAAjBD,KAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAFJ,MAEIA,EAFJ;EAOA,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;IAEE,KAAK,EAAE,CACL;MAAEE,MAAM,EAAEC,UAAU,CAApB,aAAA;MAAoCC,eAAe,EAAEN;IAArD,CADK,EAELO,SAAS,IAAIC,MAAM,CAFd,SAAA,EAGLT,IAAI,IAAJA,eAAAA,IAA2BS,MAAM,CAH5B,eAAA,EAILT,IAAI,IAAJA,IAAAA,IAAgBS,MAAM,CAJjB,IAAA,EAAA,KAAA;EAFT,CAAA,CAAA,CADF;AAjBF,CAAA;;AA+BA,IAAMA,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BD,SAAS,EAAE;IACTE,UAAU,EAAE;EADH,CADoB;EAI/Bd,eAAe,EAAE;IACfc,UAAU,EADK,EAAA;IAEfC,WAAW,EAAE;EAFE,CAJc;EAQ/Bd,IAAI,EAAE;IACJQ,MAAM,EAAE;EADJ;AARyB,CAAlB,CAAf;AAaA,eAAeO,SAAS,CAAxB,OAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/themes/v2/colors';\nimport type { $RemoveChildren, Theme } from '../types';\n\nexport type Props = $RemoveChildren<typeof View> & {\n  /**\n   * @renamed Renamed from 'inset' to 'leftInset` in v5.x\n   * Whether divider has a left inset.\n   */\n  leftInset?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *  Whether divider has a horizontal inset on both sides.\n   */\n  horizontalInset?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *  Whether divider should be bolded.\n   */\n  bold?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * <div class=\"screenshots\">\n *  <figure>\n *    <img class=\"medium\" src=\"screenshots/divider.png\" />\n *  </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Lemon</Text>\n *     <Divider />\n *     <Text>Mango</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Divider = ({\n  leftInset,\n  horizontalInset = false,\n  style,\n  theme,\n  bold = false,\n  ...rest\n}: Props) => {\n  const { dark: isDarkTheme, isV3 } = theme;\n\n  const dividerColor = isV3\n    ? theme.colors.surfaceVariant\n    : color(isDarkTheme ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n\n  return (\n    <View\n      {...rest}\n      style={[\n        { height: StyleSheet.hairlineWidth, backgroundColor: dividerColor },\n        leftInset && styles.leftInset,\n        isV3 && horizontalInset && styles.horizontalInset,\n        isV3 && bold && styles.bold,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  leftInset: {\n    marginLeft: 72,\n  },\n  horizontalInset: {\n    marginLeft: 28,\n    marginRight: 28,\n  },\n  bold: {\n    height: 1,\n  },\n});\n\nexport default withTheme(Divider);\n"]},"metadata":{},"sourceType":"module"}