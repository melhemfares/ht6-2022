{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"status\", \"disabled\", \"onPress\", \"theme\", \"testID\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\nimport { getSelectionControlIOSColor } from \"./utils\";\n\nvar CheckboxIOS = function CheckboxIOS(_ref) {\n  var status = _ref.status,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var checked = status === 'checked';\n  var indeterminate = status === 'indeterminate';\n\n  var _getSelectionControlI = getSelectionControlIOSColor({\n    theme: theme,\n    disabled: disabled,\n    customColor: rest.color\n  }),\n      checkedColor = _getSelectionControlI.checkedColor,\n      rippleColor = _getSelectionControlI.rippleColor;\n\n  var icon = indeterminate ? 'minus' : 'check';\n  return React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID\n  }), React.createElement(View, {\n    style: {\n      opacity: indeterminate || checked ? 1 : 0\n    }\n  }, React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: checkedColor,\n    direction: \"ltr\"\n  })));\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(CheckboxIOS);\nvar CheckboxIOSWithTheme = withTheme(CheckboxIOS);\nexport { CheckboxIOSWithTheme as CheckboxIOS };","map":{"version":3,"sources":["CheckboxIOS.tsx"],"names":["CheckboxIOS","rest","checked","status","indeterminate","rippleColor","getSelectionControlIOSColor","theme","disabled","customColor","color","icon","styles","testID","opacity","container","borderRadius","padding","withTheme","CheckboxIOSWithTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,OAAA,qBAAA;AACA,OAAA,eAAA;AACA,SAAA,SAAA;AAEA,SAAA,2BAAA;;AA6CA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAA,IAAA,EAOP;EAPQ,IAAA,MAAA,GAOR,IAPQ,CAAA,MAAA;EAAA,IAAA,QAAA,GAOR,IAPQ,CAAA,QAAA;EAAA,IAAA,OAAA,GAOR,IAPQ,CAAA,OAAA;EAAA,IAAA,KAAA,GAOR,IAPQ,CAAA,KAAA;EAAA,IAAA,MAAA,GAOR,IAPQ,CAAA,MAAA;EAAA,IAMhBC,IANgB,4BAOR,IAPQ;;EAQnB,IAAMC,OAAO,GAAGC,MAAM,KAAtB,SAAA;EACA,IAAMC,aAAa,GAAGD,MAAM,KAA5B,eAAA;;EAEA,4BAAsCG,2BAA2B,CAAC;IAChEC,KADgE,EAChEA,KADgE;IAEhEC,QAFgE,EAEhEA,QAFgE;IAGhEC,WAAW,EAAER,IAAI,CAACS;EAH8C,CAAD,CAAjE;EAAA,IAAM,YAAN,yBAAM,YAAN;EAAA,IAAsBL,WAAtB,yBAAsBA,WAAtB;;EAMA,IAAMM,IAAI,GAAGP,aAAa,GAAA,OAAA,GAA1B,OAAA;EAEA,OACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;IAEE,UAAU,EAFZ,IAAA;IAGE,WAAW,EAHb,WAAA;IAIE,OAAO,EAJT,OAAA;IAKE,QAAQ,EALV,QAAA;IAME,iBAAiB,EANnB,UAAA;IAOE,kBAAkB,EAAE;MAAEI,QAAF,EAAEA,QAAF;MAAYN,OAAAA,EAAAA;IAAZ,CAPtB;IAQE,uBAAuB,EARzB,QAAA;IASE,KAAK,EAAEU,MAAM,CATf,SAAA;IAUE,MAAM,EAAEC;EAVV,CAAA,CAAA,EAYE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IAAM,KAAK,EAAE;MAAEC,OAAO,EAAEV,aAAa,IAAbA,OAAAA,GAAAA,CAAAA,GAA+B;IAA1C;EAAb,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA;IACE,gBAAgB,EADlB,KAAA;IAEE,IAAI,EAFN,IAAA;IAGE,IAAI,EAHN,EAAA;IAIE,KAAK,EAJP,YAAA;IAKE,SAAS,EAAC;EALZ,CAAA,CADF,CAZF,CADF;AAnBF,CAAA;;AA6CAJ,WAAW,CAAXA,WAAAA,GAAAA,cAAAA;AAEA,IAAMY,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BG,SAAS,EAAE;IACTC,YAAY,EADH,EAAA;IAETC,OAAO,EAAE;EAFA;AADoB,CAAlB,CAAf;AAOA,eAAeC,SAAS,CAAxB,WAAwB,CAAxB;AAGA,IAAMC,oBAAoB,GAAGD,SAAS,CAAtC,WAAsC,CAAtC;AAEA,SAASC,oBAAoB,IAA7B,WAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, Theme } from '../../types';\nimport { getSelectionControlIOSColor } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}: Props) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const { checkedColor, rippleColor } = getSelectionControlIOSColor({\n    theme,\n    disabled,\n    customColor: rest.color,\n  });\n\n  const icon = indeterminate ? 'minus' : 'check';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nconst CheckboxIOSWithTheme = withTheme(CheckboxIOS);\n// @component-docs ignore-next-line\nexport { CheckboxIOSWithTheme as CheckboxIOS };\n"]},"metadata":{},"sourceType":"module"}