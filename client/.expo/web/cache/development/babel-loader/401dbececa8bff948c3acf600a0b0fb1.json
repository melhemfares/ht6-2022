{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport { defaultThemesByVersion, ThemeProvider } from \"./theming\";\nimport { Provider as SettingsProvider } from \"./settings\";\nimport MaterialCommunityIcon from \"../components/MaterialCommunityIcon\";\nimport PortalHost from \"../components/Portal/PortalHost\";\nimport { addEventListener } from \"../utils/addEventListener\";\n\nvar Provider = function Provider(props) {\n  var isOnlyVersionInTheme = props.theme && Object.keys(props.theme).length === 1 && props.theme.version;\n  var colorSchemeName = (!props.theme || isOnlyVersionInTheme) && (Appearance === null || Appearance === void 0 ? void 0 : Appearance.getColorScheme()) || 'light';\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      reduceMotionEnabled = _React$useState2[0],\n      setReduceMotionEnabled = _React$useState2[1];\n\n  var _React$useState3 = React.useState(colorSchemeName),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      colorScheme = _React$useState4[0],\n      setColorScheme = _React$useState4[1];\n\n  var handleAppearanceChange = function handleAppearanceChange(preferences) {\n    var colorScheme = preferences.colorScheme;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(function () {\n    var subscription;\n\n    if (!props.theme) {\n      subscription = addEventListener(AccessibilityInfo, 'reduceMotionChanged', setReduceMotionEnabled);\n    }\n\n    return function () {\n      if (!props.theme) {\n        var _subscription;\n\n        (_subscription = subscription) === null || _subscription === void 0 ? void 0 : _subscription.remove();\n      }\n    };\n  }, [props.theme]);\n  React.useEffect(function () {\n    var appearanceSubscription;\n\n    if (!props.theme || isOnlyVersionInTheme) {\n      appearanceSubscription = Appearance === null || Appearance === void 0 ? void 0 : Appearance.addChangeListener(handleAppearanceChange);\n    }\n\n    return function () {\n      if (!props.theme || isOnlyVersionInTheme) {\n        if (appearanceSubscription) {\n          appearanceSubscription.remove();\n        } else {\n          Appearance === null || Appearance === void 0 ? void 0 : Appearance.removeChangeListener(handleAppearanceChange);\n        }\n      }\n    };\n  }, [props.theme, isOnlyVersionInTheme]);\n\n  var getTheme = function getTheme() {\n    var _props$theme;\n\n    var themeVersion = ((_props$theme = props.theme) === null || _props$theme === void 0 ? void 0 : _props$theme.version) || 3;\n    var scheme = colorScheme || 'light';\n    var defaultThemeBase = defaultThemesByVersion[themeVersion][scheme];\n\n    var extendedThemeBase = _objectSpread(_objectSpread(_objectSpread({}, defaultThemeBase), props.theme), {}, {\n      version: themeVersion,\n      animation: {\n        scale: reduceMotionEnabled ? 0 : 1\n      }\n    });\n\n    return _objectSpread(_objectSpread({}, extendedThemeBase), {}, {\n      isV3: extendedThemeBase.version === 3\n    });\n  };\n\n  var children = props.children,\n      settings = props.settings;\n  return React.createElement(PortalHost, null, React.createElement(SettingsProvider, {\n    value: settings || {\n      icon: MaterialCommunityIcon\n    }\n  }, React.createElement(ThemeProvider, {\n    theme: getTheme()\n  }, children)));\n};\n\nexport default Provider;","map":{"version":3,"sources":["Provider.tsx"],"names":["Provider","props","isOnlyVersionInTheme","Object","colorSchemeName","Appearance","React","handleAppearanceChange","preferences","colorScheme","setColorScheme","subscription","addEventListener","appearanceSubscription","getTheme","themeVersion","scheme","defaultThemeBase","defaultThemesByVersion","extendedThemeBase","version","animation","scale","reduceMotionEnabled","isV3","settings","icon","MaterialCommunityIcon"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityInfo,\n  Appearance,\n  ColorSchemeName,\n  NativeEventSubscription,\n} from 'react-native';\nimport { defaultThemesByVersion, ThemeProvider } from './theming';\nimport { Provider as SettingsProvider, Settings } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport { addEventListener } from '../utils/addEventListener';\nimport type { ThemeProp } from '../types';\n\nexport type Props = {\n  children: React.ReactNode;\n  theme?: ThemeProp;\n  settings?: Settings;\n};\n\nconst Provider = (props: Props) => {\n  const isOnlyVersionInTheme =\n    props.theme && Object.keys(props.theme).length === 1 && props.theme.version;\n\n  const colorSchemeName =\n    ((!props.theme || isOnlyVersionInTheme) && Appearance?.getColorScheme()) ||\n    'light';\n\n  const [reduceMotionEnabled, setReduceMotionEnabled] =\n    React.useState<boolean>(false);\n  const [colorScheme, setColorScheme] =\n    React.useState<ColorSchemeName>(colorSchemeName);\n\n  const handleAppearanceChange = (\n    preferences: Appearance.AppearancePreferences\n  ) => {\n    const { colorScheme } = preferences;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (!props.theme) {\n      subscription = addEventListener(\n        AccessibilityInfo,\n        'reduceMotionChanged',\n        setReduceMotionEnabled\n      );\n    }\n    return () => {\n      if (!props.theme) {\n        subscription?.remove();\n      }\n    };\n  }, [props.theme]);\n\n  React.useEffect(() => {\n    let appearanceSubscription: NativeEventSubscription | undefined;\n    if (!props.theme || isOnlyVersionInTheme) {\n      appearanceSubscription = Appearance?.addChangeListener(\n        handleAppearanceChange\n      ) as NativeEventSubscription | undefined;\n    }\n    return () => {\n      if (!props.theme || isOnlyVersionInTheme) {\n        if (appearanceSubscription) {\n          appearanceSubscription.remove();\n        } else {\n          Appearance?.removeChangeListener(handleAppearanceChange);\n        }\n      }\n    };\n  }, [props.theme, isOnlyVersionInTheme]);\n\n  const getTheme = () => {\n    const themeVersion = props.theme?.version || 3;\n    const scheme = colorScheme || 'light';\n    const defaultThemeBase = defaultThemesByVersion[themeVersion][scheme];\n\n    const extendedThemeBase = {\n      ...defaultThemeBase,\n      ...props.theme,\n      version: themeVersion,\n      animation: {\n        scale: reduceMotionEnabled ? 0 : 1,\n      },\n    };\n\n    return {\n      ...extendedThemeBase,\n      isV3: extendedThemeBase.version === 3,\n    } as ReactNativePaper.Theme;\n  };\n\n  const { children, settings } = props;\n\n  return (\n    <PortalHost>\n      <SettingsProvider value={settings || { icon: MaterialCommunityIcon }}>\n        <ThemeProvider theme={getTheme()}>{children}</ThemeProvider>\n      </SettingsProvider>\n    </PortalHost>\n  );\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}