{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"theme\", \"variant\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { withTheme } from \"../../core/theming\";\nimport { MD3TypescaleKey } from \"../../types\";\n\nfunction AnimatedText(_ref) {\n  var style = _ref.style,\n      theme = _ref.theme,\n      variant = _ref.variant,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  if (theme.isV3 && variant) {\n    var stylesByVariant = Object.keys(MD3TypescaleKey).reduce(function (acc, key) {\n      var _theme$typescale$key = theme.typescale[key],\n          fontSize = _theme$typescale$key.fontSize,\n          fontWeight = _theme$typescale$key.fontWeight,\n          lineHeight = _theme$typescale$key.lineHeight,\n          letterSpacing = _theme$typescale$key.letterSpacing,\n          fontFamily = _theme$typescale$key.fontFamily;\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, _objectSpread(_objectSpread({}, Platform.OS === 'android' && {\n        fontFamily: fontFamily\n      }), {}, {\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        lineHeight: lineHeight,\n        letterSpacing: letterSpacing,\n        color: theme.colors.onSurface\n      })));\n    }, {});\n    var styleForVariant = stylesByVariant[variant];\n    return React.createElement(Animated.Text, _extends({}, rest, {\n      style: [styleForVariant, styles.text, {\n        writingDirection: writingDirection\n      }, style]\n    }));\n  } else {\n    return React.createElement(Animated.Text, _extends({}, rest, {\n      style: [styles.text, _objectSpread(_objectSpread({}, !theme.isV3 && theme.fonts.regular), {}, {\n        color: theme.isV3 ? theme.colors.onSurface : theme.colors.text,\n        writingDirection: writingDirection\n      }), style]\n    }));\n  }\n}\n\nvar styles = StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\nexport default withTheme(AnimatedText);","map":{"version":3,"sources":["AnimatedText.tsx"],"names":["rest","writingDirection","I18nManager","theme","stylesByVariant","fontFamily","Platform","fontSize","fontWeight","lineHeight","letterSpacing","color","onSurface","styleForVariant","styles","text","textAlign","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;AASA,SAAA,SAAA;AACA,SAAA,eAAA;;AA8BA,SAAA,YAAA,CAAA,IAAA,EAAiE;EAA3C,IAAA,KAAA,GAA2C,IAA3C,CAAA,KAAA;EAAA,IAAA,KAAA,GAA2C,IAA3C,CAAA,KAAA;EAAA,IAAA,OAAA,GAA2C,IAA3C,CAAA,OAAA;EAAA,IAA4BA,IAA5B,4BAA2C,IAA3C;;EACpB,IAAMC,gBAAgB,GAAGC,WAAW,CAAXA,KAAAA,GAAAA,KAAAA,GAAzB,KAAA;;EAEA,IAAIC,KAAK,CAALA,IAAAA,IAAJ,OAAA,EAA2B;IACzB,IAAMC,eAAe,GAAG,MAAM,CAAN,IAAA,CAAA,eAAA,EAAA,MAAA,CACtB,UAAA,GAAA,EAAA,GAAA,EAAc;MACZ,2BACED,KAAK,CAALA,SAAAA,CADF,GACEA,CADF;MAAA,IAAM,QAAN,wBAAM,QAAN;MAAA,IAAM,UAAN,wBAAM,UAAN;MAAA,IAAM,UAAN,wBAAM,UAAN;MAAA,IAAM,aAAN,wBAAM,aAAN;MAAA,IAAyDE,UAAzD,wBAAyDA,UAAzD;MAGA,uCAAO,GAAP,2BAEE,GAFF,kCAGQC,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,IAA6B;QAAED,UAAAA,EAAAA;MAAF,CAHrC;QAIIE,QAFK,EAELA,QAJJ;QAKIC,UAHK,EAGLA,UALJ;QAMIC,UAAU,EAJL,UAFT;QAOIC,aALK,EAKLA,aAPJ;QAQIC,KAAK,EAAER,KAAK,CAALA,MAAAA,CAAaS;MARxB;IALoB,CAAA,EAAxB,EAAwB,CAAxB;IA2BA,IAAMC,eAAe,GAAGT,eAAe,CAAvC,OAAuC,CAAvC;IAEA,OACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;MAEE,KAAK,EAAE,CAAA,eAAA,EAAkBU,MAAM,CAAxB,IAAA,EAA+B;QAAEb,gBAAAA,EAAAA;MAAF,CAA/B,EAAA,KAAA;IAFT,CAAA,CAAA,CADF;EA9BF,CAAA,MAoCO;IACL,OACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;MAEE,KAAK,EAAE,CACLa,MAAM,CADD,IAAA,kCAGC,CAACX,KAAK,CAAN,IAAA,IAAeA,KAAK,CAALA,KAAAA,CADrB,OAFK;QAIHQ,KAAK,EAAER,KAAK,CAALA,IAAAA,GAAaA,KAAK,CAALA,MAAAA,CAAbA,SAAAA,GAAsCA,KAAK,CAALA,MAAAA,CAF/C,IAFK;QAKHF,gBAAAA,EAAAA;MALG,IAAA,KAAA;IAFT,CAAA,CAAA,CADF;EAcD;AACF;;AAED,IAAMa,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BC,IAAI,EAAE;IACJC,SAAS,EAAE;EADP;AADyB,CAAlB,CAAf;AAMA,eAAeC,SAAS,CAAxB,YAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextStyle,\n  I18nManager,\n  StyleProp,\n  StyleSheet,\n  Platform,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { Font, MD3TypescaleKey, Theme } from '../../types';\n\ntype Props = React.ComponentPropsWithRef<typeof Animated.Text> & {\n  /**\n   * Variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  variant?: keyof typeof MD3TypescaleKey;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Animated text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nfunction AnimatedText({ style, theme, variant, ...rest }: Props) {\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  if (theme.isV3 && variant) {\n    const stylesByVariant = Object.keys(MD3TypescaleKey).reduce(\n      (acc, key) => {\n        const { fontSize, fontWeight, lineHeight, letterSpacing, fontFamily } =\n          theme.typescale[key as keyof typeof MD3TypescaleKey];\n\n        return {\n          ...acc,\n          [key]: {\n            ...(Platform.OS === 'android' && { fontFamily }),\n            fontSize,\n            fontWeight,\n            lineHeight: lineHeight,\n            letterSpacing,\n            color: theme.colors.onSurface,\n          },\n        };\n      },\n      {} as {\n        [key in MD3TypescaleKey]: {\n          fontSize: number;\n          fontWeight: Font['fontWeight'];\n          lineHeight: number;\n          letterSpacing: number;\n        };\n      }\n    );\n\n    const styleForVariant = stylesByVariant[variant];\n\n    return (\n      <Animated.Text\n        {...rest}\n        style={[styleForVariant, styles.text, { writingDirection }, style]}\n      />\n    );\n  } else {\n    return (\n      <Animated.Text\n        {...rest}\n        style={[\n          styles.text,\n          {\n            ...(!theme.isV3 && theme.fonts.regular),\n            color: theme.isV3 ? theme.colors.onSurface : theme.colors.text,\n            writingDirection,\n          },\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(AnimatedText);\n"]},"metadata":{},"sourceType":"module"}