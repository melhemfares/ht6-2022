{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, OUTLINE_MINIMIZED_LABEL_Y_OFFSET, LABEL_PADDING_TOP, MIN_DENSE_HEIGHT_OUTLINED } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition, getOutlinedInputColors, getConstants } from \"./helpers\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\n\nvar TextInputOutlined = function TextInputOutlined(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n\n  var _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      label = _ref.label,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? false : _ref$error,\n      selectionColor = _ref.selectionColor,\n      _underlineColor = _ref.underlineColor,\n      customOutlineColor = _ref.outlineColor,\n      activeOutlineColor = _ref.activeOutlineColor,\n      dense = _ref.dense,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$render = _ref.render,\n      render = _ref$render === void 0 ? function (props) {\n    return React.createElement(NativeTextInput, props);\n  } : _ref$render,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      parentState = _ref.parentState,\n      innerRef = _ref.innerRef,\n      onFocus = _ref.onFocus,\n      forceFocus = _ref.forceFocus,\n      onBlur = _ref.onBlur,\n      onChangeText = _ref.onChangeText,\n      onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n      left = _ref.left,\n      right = _ref.right,\n      placeholderTextColor = _ref.placeholderTextColor,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var adornmentConfig = getAdornmentConfig({\n    left: left,\n    right: right\n  });\n  var colors = theme.colors,\n      isV3 = theme.isV3,\n      roundness = theme.roundness;\n  var font = !isV3 ? theme.fonts.regular : {};\n  var hasActiveOutline = parentState.focused || error;\n\n  var _getConstants = getConstants(isV3),\n      INPUT_PADDING_HORIZONTAL = _getConstants.INPUT_PADDING_HORIZONTAL,\n      MIN_HEIGHT = _getConstants.MIN_HEIGHT,\n      ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET;\n\n  var _ref4 = StyleSheet.flatten(style) || {},\n      fontSizeStyle = _ref4.fontSize,\n      fontWeight = _ref4.fontWeight,\n      lineHeight = _ref4.lineHeight,\n      height = _ref4.height,\n      _ref4$backgroundColor = _ref4.backgroundColor,\n      backgroundColor = _ref4$backgroundColor === void 0 ? colors === null || colors === void 0 ? void 0 : colors.background : _ref4$backgroundColor,\n      textAlign = _ref4.textAlign,\n      viewStyle = _objectWithoutProperties(_ref4, _excluded2);\n\n  var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  var _getOutlinedInputColo = getOutlinedInputColors({\n    activeOutlineColor: activeOutlineColor,\n    customOutlineColor: customOutlineColor,\n    disabled: disabled,\n    error: error,\n    theme: theme\n  }),\n      inputTextColor = _getOutlinedInputColo.inputTextColor,\n      activeColor = _getOutlinedInputColo.activeColor,\n      outlineColor = _getOutlinedInputColo.outlineColor,\n      placeholderColor = _getOutlinedInputColo.placeholderColor,\n      errorColor = _getOutlinedInputColo.errorColor;\n\n  var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  var labelTranslationXOffset = 0;\n  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n    var side = _ref2.side,\n        type = _ref2.type;\n    return side === AdornmentSide.Left && type === AdornmentType.Icon;\n  });\n\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n\n  var minInputHeight = (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  var pad = calculatePadding(paddingSettings);\n  var paddingOut = adjustPaddingOut(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  };\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: placeholderStyle,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor: errorColor,\n    labelTranslationXOffset: labelTranslationXOffset,\n    roundness: roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  var minHeight = height || (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT);\n  var leftLayout = parentState.leftLayout,\n      rightLayout = parentState.rightLayout;\n  var leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    mode: 'outlined',\n    isV3: isV3\n  });\n  var affixTopPosition = (_affixTopPosition = {}, _defineProperty(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, _defineProperty(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, _defineProperty(_topPosition, AdornmentType.Icon, iconTopPosition), _defineProperty(_topPosition, AdornmentType.Affix, affixTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n      left: left,\n      right: right,\n      textStyle: _objectSpread(_objectSpread({}, font), {}, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n\n  return React.createElement(View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    isV3: isV3,\n    roundness: roundness,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(View, null, React.createElement(View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight: minHeight\n    }]\n  }, React.createElement(InputLabel, {\n    mode: \"outlined\",\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: LabelBackground,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({\n    testID: 'text-input-outlined'\n  }, rest), {}, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left',\n      paddingHorizontal: INPUT_PADDING_HORIZONTAL\n    }), Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(TextInputAdornment, adornmentProps)));\n};\n\nexport default TextInputOutlined;\n\nvar Outline = function Outline(_ref3) {\n  var isV3 = _ref3.isV3,\n      activeColor = _ref3.activeColor,\n      backgroundColor = _ref3.backgroundColor,\n      hasActiveOutline = _ref3.hasActiveOutline,\n      focused = _ref3.focused,\n      outlineColor = _ref3.outlineColor,\n      roundness = _ref3.roundness;\n  return React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: roundness,\n      borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nvar styles = StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;;AAUA,OAAOC,kBAAP,IACEC,kBADF,EAEEC,yCAFF;AAMA,OAAOC,UAAP;AACA,OAAOC,eAAP;AAGA,SACEC,yBADF,EAEEC,yBAFF,EAGEC,qBAHF,EAIEC,cAJF,EAKEC,gCALF,EAMEC,iBANF,EAOEC,yBAPF;AAUA,SACEC,yBADF,EAEEC,oBAFF,EAGEC,gBAHF,EAIEC,gBAJF,EAMEC,sBANF,EAOEC,wCAPF,EAQEC,sBARF,EASEC,YATF;AAWA,SAASC,aAAT,EAAwBC,aAAxB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OA2BC;EAAA;;EAAA,yBA1BzBC,QA0ByB;EAAA,IA1BzBA,QA0ByB,8BA1Bd,KA0Bc;EAAA,yBAzBzBC,QAyByB;EAAA,IAzBzBA,QAyByB,8BAzBd,IAyBc;EAAA,IAxBzBC,KAwByB,QAxBzBA,KAwByB;EAAA,sBAvBzBC,KAuByB;EAAA,IAvBzBA,KAuByB,2BAvBjB,KAuBiB;EAAA,IAtBzBC,cAsByB,QAtBzBA,cAsByB;EAAA,IArBTC,eAqBS,QArBzBC,cAqByB;EAAA,IApBXC,kBAoBW,QApBzBC,YAoByB;EAAA,IAnBzBC,kBAmByB,QAnBzBA,kBAmByB;EAAA,IAlBzBC,KAkByB,QAlBzBA,KAkByB;EAAA,IAjBzBC,KAiByB,QAjBzBA,KAiByB;EAAA,IAhBzBC,KAgByB,QAhBzBA,KAgByB;EAAA,uBAfzBC,MAeyB;EAAA,IAfzBA,MAeyB,4BAffC,eAAD;IAAA,OAAwBtC,oBAACuC,eAAD,EAAqBD,KAArB,CAAxB;EAAA,CAegB;EAAA,0BAdzBE,SAcyB;EAAA,IAdzBA,SAcyB,+BAdb,KAca;EAAA,IAbzBC,WAayB,QAbzBA,WAayB;EAAA,IAZzBC,QAYyB,QAZzBA,QAYyB;EAAA,IAXzBC,OAWyB,QAXzBA,OAWyB;EAAA,IAVzBC,UAUyB,QAVzBA,UAUyB;EAAA,IATzBC,MASyB,QATzBA,MASyB;EAAA,IARzBC,YAQyB,QARzBA,YAQyB;EAAA,IAPzBC,oBAOyB,QAPzBA,oBAOyB;EAAA,IANzBC,uBAMyB,QANzBA,uBAMyB;EAAA,IALzBC,wBAKyB,QALzBA,wBAKyB;EAAA,IAJzBC,IAIyB,QAJzBA,IAIyB;EAAA,IAHzBC,KAGyB,QAHzBA,KAGyB;EAAA,IAFzBC,oBAEyB,QAFzBA,oBAEyB;EAAA,IADtBC,IACsB;;EACzB,IAAMC,eAAe,GAAGpD,kBAAkB,CAAC;IAAEgD,IAAF,EAAEA,IAAF;IAAQC;EAAR,CAAD,CAA1C;EAEA,IAAQI,MAAR,GAAoCnB,KAApC,CAAQmB,MAAR;EAAA,IAAgBC,IAAhB,GAAoCpB,KAApC,CAAgBoB,IAAhB;EAAA,IAAsBC,SAAtB,GAAoCrB,KAApC,CAAsBqB,SAAtB;EACA,IAAMC,IAAI,GAAG,CAACF,IAAD,GAAQpB,KAAK,CAACuB,KAANvB,CAAYwB,OAApB,GAA8B,EAA3C;EACA,IAAMC,gBAAgB,GAAGpB,WAAW,CAACqB,OAAZrB,IAAuBd,KAAhD;;EAEA,oBACEP,YAAY,CAACoC,IAAD,CADd;EAAA,IAAQO,wBAAR,iBAAQA,wBAAR;EAAA,IAAkCC,UAAlC,iBAAkCA,UAAlC;EAAA,IAA8CC,gBAA9C,iBAA8CA,gBAA9C;;EAGA,YAQKC,UAAU,CAACC,OAAXD,CAAmB/B,KAAnB+B,KAA6B,EARlC;EAAA,IACYE,aADZ,SACEC,QADF;EAAA,IAEEC,UAFF,SAEEA,UAFF;EAAA,IAGEC,UAHF,SAGEA,UAHF;EAAA,IAIEC,MAJF,SAIEA,MAJF;EAAA,kCAKEC,eALF;EAAA,IAKEA,eALF,sCAKoBlB,MAAH,SAAGA,UAAH,WAAGA,GAAH,MAAGA,SAAM,CAAEmB,UAL5B;EAAA,IAMEC,SANF,SAMEA,SANF;EAAA,IAOKC,SAPL;;EASA,IAAMP,QAAQ,GAAGD,aAAa,IAAI9D,yBAAlC;;EAEA,4BAMIa,sBAAsB,CAAC;IACzBc,kBADyB,EACzBA,kBADyB;IAEzBF,kBAFyB,EAEzBA,kBAFyB;IAGzBP,QAHyB,EAGzBA,QAHyB;IAIzBG,KAJyB,EAIzBA,KAJyB;IAKzBS;EALyB,CAAD,CAN1B;EAAA,IACEyC,cADF,yBACEA,cADF;EAAA,IAEEC,WAFF,yBAEEA,WAFF;EAAA,IAGE9C,YAHF,yBAGEA,YAHF;EAAA,IAIE+C,gBAJF,yBAIEA,gBAJF;EAAA,IAKEC,UALF,yBAKEA,UALF;;EAcA,IAAMC,UAAU,GAAG1E,yBAAyB,GAAG8D,QAA/C;EACA,IAAMa,SAAS,GAAG5E,yBAAyB,GAAG+D,QAA9C;EAEA,IAAMc,UAAU,GAAG1C,WAAW,CAAC2C,WAAZ3C,CAAwB4C,KAA3C;EACA,IAAMC,WAAW,GAAG7C,WAAW,CAAC2C,WAAZ3C,CAAwB+B,MAA5C;EACA,IAAMe,cAAc,GAAGJ,UAAU,GAAG,CAApC;EACA,IAAMK,eAAe,GAAGF,WAAW,GAAG,CAAtC;EAEA,IAAMG,mBAAmB,GACvB,CAACC,WAAW,CAACC,KAAZD,GAAoB,CAApBA,GAAwB,CAAC,CAA1B,KACCH,cAAc,GACZN,UAAU,GAAGE,UAAbF,GAA2B,CAD7BM,GAEC,CAAClB,QAAQ,GAAG9D,yBAAZ,IAAyC0E,UAH3C,CADF;EAMA,IAAIW,uBAAuB,GAAG,CAA9B;EACA,IAAMC,mBAAmB,GAAGvC,eAAe,CAACwC,IAAhBxC,CAC1B;IAAA,IAAGyC,IAAH,SAAGA,IAAH;IAAA,IAASC,IAAT,SAASA,IAAT;IAAA,OACED,IAAI,KAAKzE,aAAa,CAAC2E,IAAvBF,IAA+BC,IAAI,KAAK3E,aAAa,CAAC6E,IADxD;EAD0B,EAA5B;;EAIA,IAAIL,mBAAJ,EAAyB;IACvBD,uBAAuB,GACrB,CAACF,WAAW,CAACC,KAAZD,GAAoB,CAAC,CAArBA,GAAyB,CAA1B,KACCjF,cAAc,GAAGwD,gBAAjBxD,IAAqC+C,IAAI,GAAG,CAAH,GAAO,CAAhD/C,CADD,CADFmF;EAGD;;EAED,IAAMO,cAAc,GAClB,CAACjE,KAAK,GAAGtB,yBAAH,GAA+BoD,UAArC,IAAmDrD,iBADrD;EAGA,IAAMyF,WAAW,GAAGtF,oBAAoB,CAACwE,WAAD,EAAcd,MAAd,EAAsB2B,cAAtB,CAAxC;EAEA,IAAME,WAAW,GAAGxF,yBAAyB,CAC3CyE,WAD2C,EAE3Cc,WAF2C,EAG3CzF,iBAH2C,CAA7C;;EAMA,IAAI6D,MAAM,IAAI,OAAOA,MAAP,KAAkB,QAAhC,EAA0C;IAExC8B,OAAO,CAACC,IAARD,CAAa,kDAAbA;EACD;;EAED,IAAME,eAAe,GAAG;IACtBhC,MAAM,EAAEA,MAAM,GAAG,CAACA,MAAJ,GAAa,IADL;IAEtBgB,eAFsB,EAEtBA,eAFsB;IAGtBiB,MAAM,EAAE9F,iBAHc;IAItB6B,SAAS,EAAEA,SAAS,GAAGA,SAAH,GAAe,IAJb;IAKtBN,KAAK,EAAEA,KAAK,GAAGA,KAAH,GAAW,IALD;IAMtBmE,WANsB,EAMtBA,WANsB;IAOtBhC,QAPsB,EAOtBA,QAPsB;IAQtBE,UARsB,EAQtBA,UARsB;IAStB7C,KATsB,EAStBA,KATsB;IAUtBgF,KAAK,EAAExB,SAVe;IAWtByB,SAAS,EAAEC,QAAQ,CAACC,EAATD,KAAgB,SAXL;IAYtBE,MAAM,EAAE5C,UAAU,CAACC,OAAXD,CACNhC,KAAK,GAAG4E,MAAM,CAACC,kBAAV,GAA+BD,MAAM,CAACE,aADrC9C;EAZc,CAAxB;EAiBA,IAAM+C,GAAG,GAAGlG,gBAAgB,CAACyF,eAAD,CAA5B;EAEA,IAAMU,UAAU,GAAGlG,gBAAgB,iCAAMwF,eAAN;IAAuBS;EAAvB,GAAnC;EAEA,IAAME,mBAAmB,GACvB,CAAC3B,eAAD,IAAoBa,WAAW,GAAG3F,gCAAlC,CADF;EAGA,IAAM0G,kBAAkB,GAAGvD,gBAAgB,GACvC5C,sBAAsB,CAACwB,WAAW,CAAC4E,OAAb,EAAsBxD,gBAAtB,CADiB,GAEvCpB,WAAW,CAAC2C,WAAZ3C,CAAwB6E,QAAxB7E,GACA,CADAA,GAEA,CAJJ;EAMA,IAAM8E,gBAAgB,GAAG;IACvBC,QAAQ,EAAE,UADa;IAEvBtE,IAAI,EAAE,CAFiB;IAGvBuE,iBAAiB,EAAE1D;EAHI,CAAzB;EAMA,IAAM2D,UAAU,GAAG;IACjBhG,KADiB,EACjBA,KADiB;IAEjBqB,oBAFiB,EAEjBA,oBAFiB;IAGjBqE,kBAHiB,EAGjBA,kBAHiB;IAIjBzF,KAJiB,EAIjBA,KAJiB;IAKjB4F,gBALiB,EAKjBA,gBALiB;IAMjBJ,mBANiB,EAMjBA,mBANiB;IAOjB1B,mBAPiB,EAOjBA,mBAPiB;IAQjB/B,IARiB,EAQjBA,IARiB;IASjBW,QATiB,EASjBA,QATiB;IAUjBC,UAViB,EAUjBA,UAViB;IAWjBW,UAXiB,EAWjBA,UAXiB;IAYjB0C,aAAa,EAAEnH,qBAZE;IAajB6F,WAbiB,EAajBA,WAbiB;IAcjBxC,gBAdiB,EAcjBA,gBAdiB;IAejBiB,WAfiB,EAejBA,WAfiB;IAgBjBC,gBAhBiB,EAgBjBA,gBAhBiB;IAiBjBN,eAAe,EAAEA,eAjBA;IAkBjBO,UAlBiB,EAkBjBA,UAlBiB;IAmBjBY,uBAnBiB,EAmBjBA,uBAnBiB;IAoBjBnC,SApBiB,EAoBjBA,SApBiB;IAqBjBmE,qBAAqB,EAAEvE,IAAI,CAACuE;EArBX,CAAnB;EAwBA,IAAMC,SAAS,GAAIrD,MAAM,KACtBtC,KAAK,GAAGtB,yBAAH,GAA+BoD,UADd,CAAzB;EAGA,IAAQ8D,UAAR,GAAoCrF,WAApC,CAAQqF,UAAR;EAAA,IAAoBC,WAApB,GAAoCtF,WAApC,CAAoBsF,WAApB;EAEA,IAAMC,oBAAoB,GAAG9G,wCAAwC,CAAC;IACpEsD,MAAM,EAAEqD,SAD4D;IAEpEI,WAAW,EAAEH,UAAU,CAACtD,MAAXsD,IAAqB,CAFkC;IAGpEI,YAAY,EAAE,CAACxH;EAHqD,CAAD,CAArE;EAMA,IAAMyH,qBAAqB,GAAGjH,wCAAwC,CAAC;IACrEsD,MAAM,EAAEqD,SAD6D;IAErEI,WAAW,EAAEF,WAAW,CAACvD,MAAZuD,IAAsB,CAFkC;IAGrEG,YAAY,EAAE,CAACxH;EAHsD,CAAD,CAAtE;EAKA,IAAM0H,eAAe,GAAGlH,wCAAwC,CAAC;IAC/DsD,MAAM,EAAEqD,SADuD;IAE/DI,WAAW,EAAExH,cAFkD;IAG/DyH,YAAY,EAAE,CAACxH;EAHgD,CAAD,CAAhE;EAMA,IAAM2H,eAAe,GAAGlF,KAAK,GACzB4E,WAAW,CAAC1C,KAAZ0C,IAAqBtH,cADI,GAEzBA,cAFJ;EAIA,IAAM6H,cAAc,GAAGpF,IAAI,GACvB4E,UAAU,CAACzC,KAAXyC,IAAoBrH,cADG,GAEvBA,cAFJ;EAIA,IAAM8H,sCAAsC,GAC1CpI,yCAAyC,CAAC;IACxCmD,eADwC,EACxCA,eADwC;IAExC+E,eAFwC,EAExCA,eAFwC;IAGxCC,cAHwC,EAGxCA,cAHwC;IAIxCE,IAAI,EAAE,UAJkC;IAKxChF;EALwC,CAAD,CAD3C;EAQA,IAAMiF,gBAAgB,+DACnBnH,aAAa,CAAC2E,IADK,EACE+B,oBADF,sCAEnB1G,aAAa,CAACoH,KAFK,EAEGP,qBAFH,qBAAtB;EAIA,IAAMQ,aAAa,yDAChBrH,aAAa,CAAC2E,IADE,EACKjD,uBADL,mCAEhB1B,aAAa,CAACoH,KAFE,EAEMzF,wBAFN,kBAAnB;EAKA,IAAI2F,cAAuC,GAAG;IAC5CtF,eAD4C,EAC5CA,eAD4C;IAE5CV,UAF4C,EAE5CA,UAF4C;IAG5CyD,WAAW,oDACRhF,aAAa,CAAC6E,IADN,EACakC,eADb,iCAER/G,aAAa,CAACwH,KAFN,EAEcJ,gBAFd,gBAHiC;IAO5CE,aAP4C,EAO5CA,aAP4C;IAQ5CG,kBAAkB,EAAErG,WAAW,CAACqB,OARY;IAS5C8D,qBAAqB,EAAEvE,IAAI,CAACuE;EATgB,CAA9C;;EAWA,IAAItE,eAAe,CAACyF,MAApB,EAA4B;IAC1BH,cAAc,mCACTA,cADS;MAEZ1F,IAFe,EAEfA,IAFY;MAGZC,KAHe,EAGfA,KAHY;MAIZ6F,SAAS,kCAAOtF,IAAP;QAAaW,QAAX,EAAWA,QAAb;QAAuBC;MAAvB,EAJG;MAKZ2E,OAAO,EAAExG,WAAW,CAAC4E;IALT,EAAduB;EAOD;;EAED,OACE5I,oBAACkJ,IAAD;IAAM/G,KAAK,EAAEyC;EAAb,GAME5E,oBAACmJ,OAAD;IACE3F,IAAI,EAAEA,IADR;IAEEC,SAAS,EAAEA,SAFb;IAGEI,gBAAgB,EAAEA,gBAHpB;IAIEC,OAAO,EAAErB,WAAW,CAACqB,OAJvB;IAKEgB,WAAW,EAAEA,WALf;IAME9C,YAAY,EAAEA,YANhB;IAOEyC,eAAe,EAAEA;EAPnB,EANF,EAeEzE,oBAACkJ,IAAD,QACElJ,oBAACkJ,IAAD;IACE/G,KAAK,EAAE,CACL2E,MAAM,CAACsC,cADF,EAEL;MACEC,UAAU,EAAE1I,iBADd;MAEEkH;IAFF,CAFK;EADT,GASE7H,oBAACI,UAAD;IACEoI,IAAI,EAAC,UADP;IAEE/F,WAAW,EAAEA,WAFf;IAGEiF,UAAU,EAAEA,UAHd;IAIE4B,eAAe,EAAEjJ,eAJnB;IAKEuH,qBAAqB,EAAEvE,IAAI,CAACuE;EAL9B,EATF,EAgBGvF,MAhBH,SAgBGA,UAhBH,WAgBGA,GAhBH,MAgBGA,SAAM;IACLkH,MAAM,EAAE;EADH,GAEFlG,IAFE;IAGLmG,GAAG,EAAE9G,QAHA;IAILI,YAJQ,EAIRA,YAJK;IAKL2G,WAAW,EAAE/H,KAAK,GAAGe,WAAW,CAACgH,WAAf,GAA6BpG,IAAI,CAACoG,WAL/C;IAMLrG,oBAAoB,EAAEA,oBAAoB,IAAI2B,gBANzC;IAOLtD,QAAQ,EAAE,CAACD,QAAD,IAAaC,QAPlB;IAQLG,cAAc,EACZ,OAAOA,cAAP,KAA0B,WAA1B,GACIkD,WADJ,GAEIlD,cAXD;IAYLe,OAZQ,EAYRA,OAZK;IAaLE,MAbQ,EAaRA,MAbK;IAcL6G,qBAAqB,EAAE,aAdlB;IAeLlH,SAfQ,EAeRA,SAfK;IAgBLL,KAAK,EAAE,CACL2E,MAAM,CAAC6C,KADF,EAEL,CAACnH,SAAD,IAAeA,SAAS,IAAIgC,MAA5B,GACI;MAAEA,MAAM,EAAE4B;IAAV,CADJ,GAEI,EAJC,EAKLc,UALK,kCAOAxD,IAPA;MAQHW,QAFF,EAEEA,QARG;MASHC,UAHF,EAGEA,UATG;MAUHsF,KAAK,EAAE/E,cAVJ;MAWHgF,iBAAiB,EAAErH,SAAS,GAAG,KAAH,GAAW,QAXpC;MAYHmC,SAAS,EAAEA,SAAS,GAChBA,SADgB,GAEhBe,WAAW,CAACC,KAAZD,GACA,OADAA,GAEA,MAhBD;MAiBH+B,iBAAiB,EAAE1D;IAjBhB,IAmBL6C,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,IAAyB;MAAEkD,OAAO,EAAE;IAAX,CAnBpB,EAoBLvB,sCApBK;EAhBF,GAhBT,CADF,EAyDEvI,oBAACC,kBAAD,EAAwB2I,cAAxB,CAzDF,CAfF,CADF;AAvOF;;AAsTA,eAAerH,iBAAf;;AAYA,IAAM4H,OAAO,GAAG,SAAVA,OAAU;EAAA,IACd3F,IADc,SACdA,IADc;EAAA,IAEdsB,WAFc,SAEdA,WAFc;EAAA,IAGdL,eAHc,SAGdA,eAHc;EAAA,IAIdZ,gBAJc,SAIdA,gBAJc;EAAA,IAKdC,OALc,SAKdA,OALc;EAAA,IAMd9B,YANc,SAMdA,YANc;EAAA,IAOdyB,SAPc,SAOdA,SAPc;EAAA,OASdzD,oBAACkJ,IAAD;IACEK,MAAM,EAAC,oBADT;IAEEQ,aAAa,EAAC,MAFhB;IAGE5H,KAAK,EAAE,CACL2E,MAAM,CAACgD,OADF,EAGL;MACErF,eADF,EACEA,eADF;MAEEuF,YAAY,EAAEvG,SAFhB;MAGEwG,WAAW,EAAE,CAACzG,IAAI,GAAGK,gBAAH,GAAsBC,OAA3B,IAAsC,CAAtC,GAA0C,CAHzD;MAIEoG,WAAW,EAAErG,gBAAgB,GAAGiB,WAAH,GAAiB9C;IAJhD,CAHK;EAHT,EATc;AAAhB;;AAyBA,IAAM8E,MAAM,GAAG5C,UAAU,CAACiG,MAAXjG,CAAkB;EAC/B4F,OAAO,EAAE;IACPtC,QAAQ,EAAE,UADH;IAEPtE,IAAI,EAAE,CAFC;IAGPC,KAAK,EAAE,CAHA;IAIPiH,GAAG,EAAE,CAJE;IAKPC,MAAM,EAAE;EALD,CADsB;EAQ/BjB,cAAc,EAAE;IACdkB,aAAa,EAAE;EADD,CARe;EAW/BX,KAAK,EAAE;IACLY,QAAQ,EAAE,CADL;IAELC,MAAM,EAAE,CAFH;IAGLC,MAAM,EAAE;EAHH,CAXwB;EAgB/BzD,aAAa,EAAE;IACbqC,UAAU,EAAE,CADC;IAEbiB,aAAa,EAAE;EAFF,CAhBgB;EAoB/BvD,kBAAkB,EAAE;IAClBsC,UAAU,EAAE,CADM;IAElBiB,aAAa,EAAE;EAFG;AApBW,CAAlBpG,CAAf","names":["React","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","InputLabel","LabelBackground","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_DENSE_HEIGHT_OUTLINED","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","getOutlinedInputColors","getConstants","AdornmentType","AdornmentSide","TextInputOutlined","disabled","editable","label","error","selectionColor","_underlineColor","underlineColor","customOutlineColor","outlineColor","activeOutlineColor","dense","style","theme","render","props","NativeTextInput","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","adornmentConfig","colors","isV3","roundness","font","fonts","regular","hasActiveOutline","focused","INPUT_PADDING_HORIZONTAL","MIN_HEIGHT","ADORNMENT_OFFSET","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","lineHeight","height","backgroundColor","background","textAlign","viewStyle","inputTextColor","activeColor","placeholderColor","errorColor","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","placeholderStyle","position","paddingHorizontal","labelProps","wiggleOffsetX","maxFontSizeMultiplier","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","View","Outline","labelContainer","paddingTop","labelBackground","testID","ref","placeholder","underlineColorAndroid","input","color","textAlignVertical","outline","pointerEvents","borderRadius","borderWidth","borderColor","create","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"sources":["TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  LABEL_PADDING_TOP,\n  MIN_DENSE_HEIGHT_OUTLINED,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n  getOutlinedInputColors,\n  getConstants,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, isV3, roundness } = theme;\n  const font = !isV3 ? theme.fonts.regular : {};\n  const hasActiveOutline = parentState.focused || error;\n\n  const { INPUT_PADDING_HORIZONTAL, MIN_HEIGHT, ADORNMENT_OFFSET } =\n    getConstants(isV3);\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors?.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const {\n    inputTextColor,\n    activeColor,\n    outlineColor,\n    placeholderColor,\n    errorColor,\n  } = getOutlinedInputColors({\n    activeOutlineColor,\n    customOutlineColor,\n    disabled,\n    error,\n    theme,\n  });\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.isRTL ? -1 : 1) *\n      (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  };\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT)) as number;\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n      isV3,\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        isV3={isV3}\n        roundness={roundness}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            mode=\"outlined\"\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID: 'text-input-outlined',\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n                paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  isV3: boolean;\n  activeColor: string;\n  backgroundColor: ColorValue;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  roundness?: number;\n};\n\nconst Outline = ({\n  isV3,\n  activeColor,\n  backgroundColor,\n  hasActiveOutline,\n  focused,\n  outlineColor,\n  roundness,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: roundness,\n        borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}