{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"theme\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport Text from \"../Typography/Text\";\nimport { useTheme } from \"../../core/theming\";\n\nvar ListSubheader = function ListSubheader(_ref) {\n  var style = _ref.style,\n      overrideTheme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var theme = useTheme(overrideTheme);\n  var textColor = theme.isV3 ? theme.colors.onSurfaceVariant : color(theme.colors.text).alpha(0.54).rgb().string();\n  return React.createElement(Text, _extends({\n    variant: \"bodyMedium\",\n    numberOfLines: 1\n  }, rest, {\n    style: [styles.container, _objectSpread({\n      color: textColor\n    }, theme.isV3 ? theme.typescale.bodyMedium : theme.fonts.medium), style]\n  }));\n};\n\nListSubheader.displayName = 'List.Subheader';\nvar styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n    paddingVertical: 13\n  }\n});\nexport default ListSubheader;","map":{"version":3,"sources":["ListSubheader.tsx"],"names":["ListSubheader","theme","rest","useTheme","textColor","color","styles","container","paddingHorizontal","paddingVertical"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAEA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,IAAA;AACA,SAAA,QAAA;;AA2BA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAA,IAAA,EAAqD;EAApD,IAAA,KAAA,GAAoD,IAApD,CAAA,KAAA;EAAA,IAAA,aAAA,GAAoD,IAApD,CAASC,KAAT;EAAA,IAAkCC,IAAlC,4BAAoD,IAApD;;EACrB,IAAMD,KAAK,GAAGE,QAAQ,CAAtB,aAAsB,CAAtB;EAEA,IAAMC,SAAS,GAAGH,KAAK,CAALA,IAAAA,GACdA,KAAK,CAALA,MAAAA,CADcA,gBAAAA,GAEdI,KAAK,CAACJ,KAAK,CAALA,MAAAA,CAANI,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAFJ,MAEIA,EAFJ;EAIA,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IACE,OAAO,EADT,YAAA;IAEE,aAAa,EAAE;EAFjB,CAAA,EAAA,IAAA,EAAA;IAIE,KAAK,EAAE,CACLC,MAAM,CADD,SAAA;MAGHD,KAAK,EADP;IAFK,GAICJ,KAAK,CAALA,IAAAA,GAAaA,KAAK,CAALA,SAAAA,CAAbA,UAAAA,GAA0CA,KAAK,CAALA,KAAAA,CAA9C,MAJG,GAAA,KAAA;EAJT,CAAA,CAAA,CADF;AAPF,CAAA;;AAwBAD,aAAa,CAAbA,WAAAA,GAAAA,gBAAAA;AAEA,IAAMM,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BC,SAAS,EAAE;IACTC,iBAAiB,EADR,EAAA;IAETC,eAAe,EAAE;EAFR;AADoB,CAAlB,CAAf;AAOA,eAAA,aAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport Text from '../Typography/Text';\nimport { useTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\n\nexport type Props = React.ComponentProps<typeof Text> & {\n  /**\n   * @optional\n   */\n  theme?: Theme;\n  /**\n   * Style that is passed to Text element.\n   */\n  style?: StyleProp<TextStyle>;\n};\n\n/**\n * A component used to display a header in lists.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => <List.Subheader>My List Title</List.Subheader>;\n *\n * export default MyComponent;\n * ```\n */\nconst ListSubheader = ({ style, theme: overrideTheme, ...rest }: Props) => {\n  const theme = useTheme(overrideTheme);\n\n  const textColor = theme.isV3\n    ? theme.colors.onSurfaceVariant\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <Text\n      variant=\"bodyMedium\"\n      numberOfLines={1}\n      {...rest}\n      style={[\n        styles.container,\n        {\n          color: textColor,\n          ...(theme.isV3 ? theme.typescale.bodyMedium : theme.fonts.medium),\n        },\n        style,\n      ]}\n    />\n  );\n};\n\nListSubheader.displayName = 'List.Subheader';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n    paddingVertical: 13,\n  },\n});\n\nexport default ListSubheader;\n"]},"metadata":{},"sourceType":"module"}