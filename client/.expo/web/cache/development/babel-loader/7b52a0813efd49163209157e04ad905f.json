{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\", \"mode\", \"position\", \"accessibilityLabel\", \"disabled\", \"labelVariant\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Checkbox from \"./Checkbox\";\nimport CheckboxAndroid from \"./CheckboxAndroid\";\nimport CheckboxIOS from \"./CheckboxIOS\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n      status = _ref.status,\n      label = _ref.label,\n      onPress = _ref.onPress,\n      labelStyle = _ref.labelStyle,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      mode = _ref.mode,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? 'trailing' : _ref$position,\n      _ref$accessibilityLab = _ref.accessibilityLabel,\n      accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n      disabled = _ref.disabled,\n      _ref$labelVariant = _ref.labelVariant,\n      labelVariant = _ref$labelVariant === void 0 ? 'bodyLarge' : _ref$labelVariant,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var checkboxProps = _objectSpread(_objectSpread({}, props), {}, {\n    status: status,\n    theme: theme,\n    disabled: disabled\n  });\n\n  var isLeading = position === 'leading';\n  var checkbox;\n\n  if (mode === 'android') {\n    checkbox = React.createElement(CheckboxAndroid, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = React.createElement(CheckboxIOS, checkboxProps);\n  } else {\n    checkbox = React.createElement(Checkbox, checkboxProps);\n  }\n\n  var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  var textAlign = isLeading ? 'right' : 'left';\n  var computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign: textAlign\n  };\n  return React.createElement(TouchableRipple, {\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked',\n      disabled: disabled\n    },\n    onPress: onPress,\n    testID: testID,\n    disabled: disabled\n  }, React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, React.createElement(Text, {\n    variant: labelVariant,\n    style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n  }, label), !isLeading && checkbox));\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default withTheme(CheckboxItem);\nvar CheckboxItemWithTheme = withTheme(CheckboxItem);\nexport { CheckboxItemWithTheme as CheckboxItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","position","accessibilityLabel","labelVariant","props","checkboxProps","status","theme","disabled","isLeading","mode","checkbox","textColor","disabledTextColor","textAlign","computedStyle","color","checked","styles","withTheme","CheckboxItemWithTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","flexShrink","flexGrow","font","fontSize"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { MD3TypescaleKey, Theme } from '../../types';\n\nexport type Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  position = 'trailing',\n  accessibilityLabel = label,\n  disabled,\n  labelVariant = 'bodyLarge',\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme, disabled };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n        disabled,\n      }}\n      onPress={onPress}\n      testID={testID}\n      disabled={disabled}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          variant={labelVariant}\n          style={[\n            styles.label,\n            !theme.isV3 && styles.font,\n            computedStyle,\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}