{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\", \"accessibilityLabel\", \"badge\"];\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"../Typography/Text\";\nimport Icon from \"../Icon\";\nimport { withTheme } from \"../../core/theming\";\nimport Badge from \"../Badge\";\nvar badgeSize = 8;\nvar iconSize = 24;\nvar itemSize = 56;\nvar outlineHeight = 32;\n\nvar DrawerCollapsedItem = function DrawerCollapsedItem(_ref) {\n  var icon = _ref.icon,\n      label = _ref.label,\n      active = _ref.active,\n      theme = _ref.theme,\n      style = _ref.style,\n      onPress = _ref.onPress,\n      accessibilityLabel = _ref.accessibilityLabel,\n      _ref$badge = _ref.badge,\n      badge = _ref$badge === void 0 ? false : _ref$badge,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var isV3 = theme.isV3;\n  var scale = theme.animation.scale;\n\n  var _React$useState = React.useState(1),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      numOfLines = _React$useState2[0],\n      setNumOfLines = _React$useState2[1];\n\n  var _React$useRef = React.useRef(new Animated.Value(active ? 1 : 0.5)),\n      animScale = _React$useRef.current;\n\n  React.useEffect(function () {\n    if (!active) {\n      animScale.setValue(0.5);\n    }\n  }, [animScale, active]);\n\n  if (!isV3) {\n    return null;\n  }\n\n  var handlePressOut = function handlePressOut() {\n    Animated.timing(animScale, {\n      toValue: 1,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n\n  var iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;\n  var backgroundColor = active ? theme.colors.secondaryContainer : 'transparent';\n  var labelColor = active ? theme.colors.onSurface : theme.colors.onSurfaceVariant;\n  var iconColor = active ? theme.colors.onSecondaryContainer : theme.colors.onSurfaceVariant;\n\n  var onTextLayout = function onTextLayout(_ref2) {\n    var nativeEvent = _ref2.nativeEvent;\n    setNumOfLines(nativeEvent.lines.length);\n  };\n\n  var androidLetterSpacingStyle = Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;\n  return React.createElement(View, rest, React.createElement(TouchableWithoutFeedback, {\n    onPress: onPress,\n    onPressOut: onPress ? handlePressOut : undefined,\n    accessibilityTraits: active ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: active\n    },\n    accessibilityLabel: accessibilityLabel\n  }, React.createElement(View, {\n    style: styles.wrapper\n  }, React.createElement(Animated.View, {\n    style: [styles.outline, !label && styles.roundedOutline, {\n      transform: [label ? {\n        scaleX: animScale\n      } : {\n        scale: animScale\n      }],\n      backgroundColor: backgroundColor\n    }, style]\n  }), React.createElement(View, {\n    style: [styles.icon, {\n      top: iconPadding\n    }]\n  }, badge && React.createElement(View, {\n    style: styles.badgeContainer\n  }, typeof badge === 'boolean' ? React.createElement(Badge, {\n    visible: badge,\n    size: badgeSize\n  }) : React.createElement(Badge, {\n    visible: badge != null,\n    size: 2 * badgeSize\n  }, badge)), React.createElement(Icon, {\n    source: icon,\n    size: iconSize,\n    color: iconColor\n  })), label ? React.createElement(Text, {\n    variant: \"labelMedium\",\n    selectable: false,\n    numberOfLines: 2,\n    onTextLayout: onTextLayout,\n    style: [styles.label, androidLetterSpacingStyle, {\n      color: labelColor\n    }]\n  }, label) : null)));\n};\n\nDrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';\nvar styles = StyleSheet.create({\n  wrapper: {\n    width: 80,\n    marginBottom: 12,\n    minHeight: itemSize,\n    alignItems: 'center'\n  },\n  outline: {\n    width: itemSize,\n    height: outlineHeight,\n    borderRadius: itemSize / 2,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  roundedOutline: {\n    height: itemSize\n  },\n  icon: {\n    position: 'absolute'\n  },\n  letterSpacing: {\n    letterSpacing: 0.3,\n    alignSelf: 'stretch'\n  },\n  label: {\n    marginHorizontal: 12,\n    marginTop: 4,\n    textAlign: 'center'\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 20,\n    bottom: 20,\n    zIndex: 2\n  }\n});\nexport default withTheme(DrawerCollapsedItem);","map":{"version":3,"mappings":"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","names":["React","Text","Icon","withTheme","Badge","badgeSize","iconSize","itemSize","outlineHeight","DrawerCollapsedItem","icon","label","active","theme","style","onPress","accessibilityLabel","badge","rest","isV3","scale","animation","useState","numOfLines","setNumOfLines","useRef","Animated","Value","animScale","current","useEffect","setValue","handlePressOut","timing","toValue","duration","useNativeDriver","start","iconPadding","backgroundColor","colors","secondaryContainer","labelColor","onSurface","onSurfaceVariant","iconColor","onSecondaryContainer","onTextLayout","nativeEvent","lines","length","androidLetterSpacingStyle","Platform","OS","styles","letterSpacing","View","TouchableWithoutFeedback","onPressOut","undefined","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","wrapper","outline","roundedOutline","transform","scaleX","top","badgeContainer","visible","size","source","color","variant","selectable","numberOfLines","displayName","StyleSheet","create","width","marginBottom","minHeight","alignItems","height","borderRadius","justifyContent","position","alignSelf","marginHorizontal","marginTop","textAlign","left","bottom","zIndex"],"sources":["DrawerCollapsedItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  Animated,\n  TouchableWithoutFeedback,\n  NativeSyntheticEvent,\n  TextLayoutEventData,\n  Platform,\n} from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport Badge from '../Badge';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label?: string;\n  /**\n   * Icon to display for the `DrawerCollapsedItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Badge to show on the icon, can be `true` to show a dot, `string` or `number` to show text.\n   */\n  badge?: string | number | boolean;\n};\n\nconst badgeSize = 8;\nconst iconSize = 24;\nconst itemSize = 56;\nconst outlineHeight = 32;\n\n/**\n * @supported Available in v5.x with theme version 3\n * Collapsed component used to show an action item with an icon and optionally label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/drawer-collapsed.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.CollapsedItem\n *      icon=\"inbox\"\n *      label=\"Inbox\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerCollapsedItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  badge = false,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n  const { scale } = theme.animation;\n\n  const [numOfLines, setNumOfLines] = React.useState(1);\n\n  const { current: animScale } = React.useRef<Animated.Value>(\n    new Animated.Value(active ? 1 : 0.5)\n  );\n\n  React.useEffect(() => {\n    if (!active) {\n      animScale.setValue(0.5);\n    }\n  }, [animScale, active]);\n\n  if (!isV3) {\n    return null;\n  }\n\n  const handlePressOut = () => {\n    Animated.timing(animScale, {\n      toValue: 1,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;\n\n  const backgroundColor = active\n    ? theme.colors.secondaryContainer\n    : 'transparent';\n  const labelColor = active\n    ? theme.colors.onSurface\n    : theme.colors.onSurfaceVariant;\n  const iconColor = active\n    ? theme.colors.onSecondaryContainer\n    : theme.colors.onSurfaceVariant;\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    setNumOfLines(nativeEvent.lines.length);\n  };\n\n  // Label is cut off on Android, when centered \"labelMedium\" text\n  // has more than 4 lines, so there is a need to decrease the letter spacing.\n  const androidLetterSpacingStyle =\n    Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;\n\n  return (\n    <View {...rest}>\n      <TouchableWithoutFeedback\n        onPress={onPress}\n        onPressOut={onPress ? handlePressOut : undefined}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n      >\n        <View style={styles.wrapper}>\n          <Animated.View\n            style={[\n              styles.outline,\n              !label && styles.roundedOutline,\n              {\n                transform: [\n                  label\n                    ? {\n                        scaleX: animScale,\n                      }\n                    : { scale: animScale },\n                ],\n                backgroundColor,\n              },\n              style,\n            ]}\n          />\n\n          <View style={[styles.icon, { top: iconPadding }]}>\n            {badge && (\n              <View style={styles.badgeContainer}>\n                {typeof badge === 'boolean' ? (\n                  <Badge visible={badge} size={badgeSize} />\n                ) : (\n                  <Badge visible={badge != null} size={2 * badgeSize}>\n                    {badge}\n                  </Badge>\n                )}\n              </View>\n            )}\n            <Icon source={icon} size={iconSize} color={iconColor} />\n          </View>\n\n          {label ? (\n            <Text\n              variant=\"labelMedium\"\n              selectable={false}\n              numberOfLines={2}\n              onTextLayout={onTextLayout}\n              style={[\n                styles.label,\n                androidLetterSpacingStyle,\n                {\n                  color: labelColor,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableWithoutFeedback>\n    </View>\n  );\n};\n\nDrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    width: 80,\n    marginBottom: 12,\n    minHeight: itemSize,\n    alignItems: 'center',\n  },\n  outline: {\n    width: itemSize,\n    height: outlineHeight,\n    borderRadius: itemSize / 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  roundedOutline: {\n    height: itemSize,\n  },\n  icon: {\n    position: 'absolute',\n  },\n  letterSpacing: {\n    letterSpacing: 0.3,\n    alignSelf: 'stretch',\n  },\n  label: {\n    marginHorizontal: 12,\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 20,\n    bottom: 20,\n    zIndex: 2,\n  },\n});\n\nexport default withTheme(DrawerCollapsedItem);\n"]},"metadata":{},"sourceType":"module"}