{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"theme\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Title from \"../Typography/v2/Title\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\n\nvar DialogTitle = function DialogTitle(_ref) {\n  var _theme$colors;\n\n  var children = _ref.children,\n      theme = _ref.theme,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var isV3 = theme.isV3;\n  var TextComponent = isV3 ? Text : Title;\n  var textColor = isV3 ? theme.colors.onSurface : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.text;\n  return React.createElement(TextComponent, _extends({\n    variant: \"headlineSmall\",\n    accessibilityRole: \"header\",\n    style: [styles.text, isV3 && styles.v3Text, {\n      color: textColor\n    }, style]\n  }, rest), children);\n};\n\nDialogTitle.displayName = 'Dialog.Title';\nvar styles = StyleSheet.create({\n  text: {\n    marginTop: 22,\n    marginBottom: 18,\n    marginHorizontal: 24\n  },\n  v3Text: {\n    marginTop: 16,\n    marginBottom: 16\n  }\n});\nexport default withTheme(DialogTitle);\nexport { DialogTitle };","map":{"version":3,"sources":["DialogTitle.tsx"],"names":["DialogTitle","rest","isV3","TextComponent","textColor","theme","styles","color","text","marginTop","marginBottom","marginHorizontal","v3Text","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAEA,OAAA,KAAA;AACA,OAAA,IAAA;AACA,SAAA,SAAA;;AAiDA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAA,IAAA,EAAgD;EAAA,IAAA,aAAA;;EAA/C,IAAA,QAAA,GAA+C,IAA/C,CAAA,QAAA;EAAA,IAAA,KAAA,GAA+C,IAA/C,CAAA,KAAA;EAAA,IAAA,KAAA,GAA+C,IAA/C,CAAA,KAAA;EAAA,IAA6BC,IAA7B,4BAA+C,IAA/C;;EACnB,IAAQC,IAAR,GAAA,KAAA,CAAQA,IAAR;EAEA,IAAMC,aAAa,GAAGD,IAAI,GAAA,IAAA,GAA1B,KAAA;EACA,IAAME,SAAS,GAAGF,IAAI,GAAGG,KAAK,CAALA,MAAAA,CAAH,SAAA,GAAA,CAAA,aAAA,GAA4BA,KAAK,CAAjC,MAAA,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAA4BA,aAAAA,CAAlD,IAAA;EAEA,OACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA;IACE,OAAO,EADT,eAAA;IAEE,iBAAiB,EAFnB,QAAA;IAGE,KAAK,EAAE,CAACC,MAAM,CAAP,IAAA,EAAcJ,IAAI,IAAII,MAAM,CAA5B,MAAA,EAAqC;MAAEC,KAAK,EAAEH;IAAT,CAArC,EAAA,KAAA;EAHT,CAAA,EAAA,IAAA,CAAA,EADF,QACE,CADF;AANF,CAAA;;AAkBAJ,WAAW,CAAXA,WAAAA,GAAAA,cAAAA;AAEA,IAAMM,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BE,IAAI,EAAE;IACJC,SAAS,EADL,EAAA;IAEJC,YAAY,EAFR,EAAA;IAGJC,gBAAgB,EAAE;EAHd,CADyB;EAM/BC,MAAM,EAAE;IACNH,SAAS,EADH,EAAA;IAENC,YAAY,EAAE;EAFR;AANuB,CAAlB,CAAf;AAYA,eAAeG,SAAS,CAAxB,WAAwB,CAAxB;AAGA,SAAA,WAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport Title from '../Typography/v2/Title';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\n\nexport type Props = React.ComponentPropsWithRef<typeof Title> & {\n  /**\n   * Title text for the `DialogTitle`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A component to show a title in a Dialog.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/dialog-title.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Portal>\n *       <Dialog visible={visible} onDismiss={hideDialog}>\n *         <Dialog.Title>This is a title</Dialog.Title>\n *         <Dialog.Content>\n *           <Paragraph>This is simple dialog</Paragraph>\n *         </Dialog.Content>\n *       </Dialog>\n *     </Portal>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst DialogTitle = ({ children, theme, style, ...rest }: Props) => {\n  const { isV3 } = theme;\n\n  const TextComponent = isV3 ? Text : Title;\n  const textColor = isV3 ? theme.colors.onSurface : theme.colors?.text;\n\n  return (\n    <TextComponent\n      variant=\"headlineSmall\"\n      accessibilityRole=\"header\"\n      style={[styles.text, isV3 && styles.v3Text, { color: textColor }, style]}\n      {...rest}\n    >\n      {children}\n    </TextComponent>\n  );\n};\n\nDialogTitle.displayName = 'Dialog.Title';\n\nconst styles = StyleSheet.create({\n  text: {\n    marginTop: 22,\n    marginBottom: 18,\n    marginHorizontal: 24,\n  },\n  v3Text: {\n    marginTop: 16,\n    marginBottom: 16,\n  },\n});\n\nexport default withTheme(DialogTitle);\n\n// @component-docs ignore-next-line\nexport { DialogTitle };\n"]},"metadata":{},"sourceType":"module"}