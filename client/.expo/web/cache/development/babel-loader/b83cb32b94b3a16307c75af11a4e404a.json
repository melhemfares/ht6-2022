{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"clearAccessibilityLabel\", \"clearIcon\", \"icon\", \"iconColor\", \"inputStyle\", \"onIconPress\", \"placeholder\", \"searchAccessibilityLabel\", \"elevation\", \"style\", \"theme\", \"value\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport color from 'color';\nimport IconButton from \"./IconButton/IconButton\";\nimport Surface from \"./Surface\";\nimport { withTheme } from \"../core/theming\";\nimport MaterialCommunityIcon from \"./MaterialCommunityIcon\";\nvar Searchbar = React.forwardRef(function (_ref, ref) {\n  var _theme$colors;\n\n  var _ref$clearAccessibili = _ref.clearAccessibilityLabel,\n      clearAccessibilityLabel = _ref$clearAccessibili === void 0 ? 'clear' : _ref$clearAccessibili,\n      clearIcon = _ref.clearIcon,\n      icon = _ref.icon,\n      customIconColor = _ref.iconColor,\n      inputStyle = _ref.inputStyle,\n      onIconPress = _ref.onIconPress,\n      placeholder = _ref.placeholder,\n      _ref$searchAccessibil = _ref.searchAccessibilityLabel,\n      searchAccessibilityLabel = _ref$searchAccessibil === void 0 ? 'search' : _ref$searchAccessibil,\n      _ref$elevation = _ref.elevation,\n      elevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n      style = _ref.style,\n      theme = _ref.theme,\n      value = _ref.value,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var root = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    var input = root.current;\n\n    if (input) {\n      return {\n        focus: function focus() {\n          return input.focus();\n        },\n        clear: function clear() {\n          return input.clear();\n        },\n        setNativeProps: function setNativeProps(args) {\n          return input.setNativeProps(args);\n        },\n        isFocused: function isFocused() {\n          return input.isFocused();\n        },\n        blur: function blur() {\n          return input.blur();\n        }\n      };\n    }\n\n    var noop = function noop() {\n      throw new Error('TextInput is not available');\n    };\n\n    return {\n      focus: noop,\n      clear: noop,\n      setNativeProps: noop,\n      isFocused: noop,\n      blur: noop\n    };\n  });\n\n  var handleClearPress = function handleClearPress() {\n    var _root$current, _rest$onChangeText;\n\n    (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.clear();\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, '');\n  };\n\n  var colors = theme.colors,\n      roundness = theme.roundness,\n      dark = theme.dark,\n      isV3 = theme.isV3;\n  var textColor = isV3 ? theme.colors.onSurface : theme.colors.text;\n  var iconColor = customIconColor || (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n  var rippleColor = color(textColor).alpha(0.32).rgb().string();\n  return React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness\n    }, !isV3 && styles.elevation, styles.container, style]\n  }, theme.isV3 && {\n    elevation: elevation\n  }), React.createElement(IconButton, {\n    accessibilityRole: \"button\",\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onIconPress,\n    iconColor: iconColor,\n    icon: icon || function (_ref2) {\n      var size = _ref2.size,\n          color = _ref2.color;\n      return React.createElement(MaterialCommunityIcon, {\n        name: \"magnify\",\n        color: color,\n        size: size,\n        direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    accessibilityLabel: searchAccessibilityLabel\n  }), React.createElement(TextInput, _extends({\n    style: [styles.input, _objectSpread(_objectSpread({\n      color: textColor\n    }, !isV3 && theme.fonts.regular), Platform.select({\n      web: {\n        outline: 'none'\n      }\n    })), inputStyle],\n    placeholder: placeholder || '',\n    placeholderTextColor: theme.isV3 ? theme.colors.onSurface : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.placeholder,\n    selectionColor: colors === null || colors === void 0 ? void 0 : colors.primary,\n    underlineColorAndroid: \"transparent\",\n    returnKeyType: \"search\",\n    keyboardAppearance: dark ? 'dark' : 'light',\n    accessibilityRole: \"search\",\n    ref: root,\n    value: value\n  }, rest)), React.createElement(IconButton, {\n    borderless: true,\n    disabled: !value,\n    accessibilityLabel: clearAccessibilityLabel,\n    iconColor: value ? iconColor : 'rgba(255, 255, 255, 0)',\n    rippleColor: rippleColor,\n    onPress: handleClearPress,\n    icon: clearIcon || function (_ref3) {\n      var size = _ref3.size,\n          color = _ref3.color;\n      return React.createElement(MaterialCommunityIcon, {\n        name: \"close\",\n        color: color,\n        size: size,\n        direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    accessibilityRole: \"button\"\n  }));\n});\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0\n  },\n  elevation: {\n    elevation: 4\n  }\n});\nexport default withTheme(Searchbar);","map":{"version":3,"sources":["Searchbar.tsx"],"names":["Searchbar","clearAccessibilityLabel","iconColor","searchAccessibilityLabel","elevation","rest","root","React","input","focus","clear","setNativeProps","args","isFocused","blur","noop","handleClearPress","isV3","textColor","theme","customIconColor","dark","color","rippleColor","borderRadius","roundness","styles","icon","I18nManager","web","outline","placeholder","colors","value","clearIcon","container","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  TextInputProps,\n  ViewStyle,\n  TextStyle,\n  Animated,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton/IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport type { Theme } from '../types';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\nexport type Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Changes Searchbar shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      elevation = 1,\n      style,\n      theme,\n      value,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => {\n      const input = root.current;\n\n      if (input) {\n        return {\n          focus: () => input.focus(),\n          clear: () => input.clear(),\n          setNativeProps: (args: TextInputProps) => input.setNativeProps(args),\n          isFocused: () => input.isFocused(),\n          blur: () => input.blur(),\n        };\n      }\n\n      const noop = () => {\n        throw new Error('TextInput is not available');\n      };\n\n      return {\n        focus: noop,\n        clear: noop,\n        setNativeProps: noop,\n        isFocused: noop,\n        blur: noop,\n      };\n    });\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, isV3 } = theme;\n    const textColor = isV3 ? theme.colors.onSurface : theme.colors.text;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness },\n          !isV3 && styles.elevation,\n          styles.container,\n          style,\n        ]}\n        {...(theme.isV3 && { elevation })}\n      >\n        <IconButton\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          iconColor={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[\n            styles.input,\n            {\n              color: textColor,\n              ...(!isV3 && theme.fonts.regular),\n              ...Platform.select({ web: { outline: 'none' } }),\n            },\n            inputStyle,\n          ]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={\n            theme.isV3 ? theme.colors.onSurface : theme.colors?.placeholder\n          }\n          selectionColor={colors?.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          accessibilityLabel={clearAccessibilityLabel}\n          iconColor={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n  elevation: {\n    elevation: 4,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]},"metadata":{},"sourceType":"module"}