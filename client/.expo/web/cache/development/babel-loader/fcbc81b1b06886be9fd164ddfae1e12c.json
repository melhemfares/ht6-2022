{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"activeUnderlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"height\", \"paddingHorizontal\", \"textAlign\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport InputLabel from \"./Label/InputLabel\";\nimport TextInputAdornment from \"./Adornment/TextInputAdornment\";\nimport { useTheme } from \"../../core/theming\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, MINIMIZED_LABEL_Y_OFFSET, LABEL_PADDING_TOP_DENSE, MIN_DENSE_HEIGHT_WL, MIN_DENSE_HEIGHT } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingFlat, interpolatePlaceholder, calculateFlatAffixTopPosition, calculateFlatInputHorizontalPadding, getFlatInputColors, getConstants } from \"./helpers\";\nimport { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport { AdornmentSide, AdornmentType, InputMode } from \"./Adornment/enums\";\n\nvar TextInputFlat = function TextInputFlat(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n\n  var _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      label = _ref.label,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? false : _ref$error,\n      selectionColor = _ref.selectionColor,\n      underlineColor = _ref.underlineColor,\n      activeUnderlineColor = _ref.activeUnderlineColor,\n      dense = _ref.dense,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$render = _ref.render,\n      render = _ref$render === void 0 ? function (props) {\n    return React.createElement(NativeTextInput, props);\n  } : _ref$render,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      parentState = _ref.parentState,\n      innerRef = _ref.innerRef,\n      onFocus = _ref.onFocus,\n      forceFocus = _ref.forceFocus,\n      onBlur = _ref.onBlur,\n      onChangeText = _ref.onChangeText,\n      onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n      left = _ref.left,\n      right = _ref.right,\n      placeholderTextColor = _ref.placeholderTextColor,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var isAndroid = Platform.OS === 'android';\n  var colors = theme.colors,\n      isV3 = theme.isV3,\n      roundness = theme.roundness;\n  var font = !isV3 ? theme.fonts.regular : {};\n  var hasActiveOutline = parentState.focused || error;\n\n  var _getConstants = getConstants(isV3),\n      LABEL_PADDING_TOP = _getConstants.LABEL_PADDING_TOP,\n      FLAT_INPUT_OFFSET = _getConstants.FLAT_INPUT_OFFSET,\n      MIN_HEIGHT = _getConstants.MIN_HEIGHT;\n\n  var _ref3 = StyleSheet.flatten(style) || {},\n      fontSizeStyle = _ref3.fontSize,\n      fontWeight = _ref3.fontWeight,\n      height = _ref3.height,\n      paddingHorizontal = _ref3.paddingHorizontal,\n      textAlign = _ref3.textAlign,\n      viewStyle = _objectWithoutProperties(_ref3, _excluded2);\n\n  var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n  var adornmentConfig = getAdornmentConfig({\n    left: left,\n    right: right\n  });\n\n  var _calculateFlatInputHo = calculateFlatInputHorizontalPadding({\n    adornmentConfig: adornmentConfig,\n    isV3: isV3\n  }),\n      paddingLeft = _calculateFlatInputHo.paddingLeft,\n      paddingRight = _calculateFlatInputHo.paddingRight;\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal;\n    paddingRight = paddingHorizontal;\n  }\n\n  var leftLayout = parentState.leftLayout,\n      rightLayout = parentState.rightLayout;\n  var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    paddingHorizontal: paddingHorizontal,\n    inputOffset: FLAT_INPUT_OFFSET,\n    mode: InputMode.Flat,\n    isV3: isV3\n  });\n\n  var _getFlatInputColors = getFlatInputColors({\n    underlineColor: underlineColor,\n    activeUnderlineColor: activeUnderlineColor,\n    disabled: disabled,\n    error: error,\n    theme: theme\n  }),\n      inputTextColor = _getFlatInputColors.inputTextColor,\n      activeColor = _getFlatInputColors.activeColor,\n      underlineColorCustom = _getFlatInputColors.underlineColorCustom,\n      placeholderColor = _getFlatInputColors.placeholderColor,\n      errorColor = _getFlatInputColors.errorColor,\n      backgroundColor = _getFlatInputColors.backgroundColor;\n\n  var containerStyle = {\n    backgroundColor: backgroundColor,\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness\n  };\n  var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n  var minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n  var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    label: label,\n    scale: fontScale,\n    isAndroid: isAndroid,\n    styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n  };\n  var pad = calculatePadding(paddingSettings);\n  var paddingFlat = adjustPaddingFlat(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  var flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n  var iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n  var leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n    height: flatHeight\n  }, paddingFlat), {}, {\n    affixHeight: leftLayout.height\n  })) : null;\n  var rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n    height: flatHeight\n  }, paddingFlat), {}, {\n    affixHeight: rightLayout.height\n  })) : null;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    paddingOffset: {\n      paddingLeft: paddingLeft,\n      paddingRight: paddingRight\n    },\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    errorColor: errorColor,\n    roundness: roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  var affixTopPosition = (_affixTopPosition = {}, _defineProperty(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, _defineProperty(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    paddingHorizontal: paddingHorizontal,\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, _defineProperty(_topPosition, AdornmentType.Affix, affixTopPosition), _defineProperty(_topPosition, AdornmentType.Icon, iconTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n      left: left,\n      right: right,\n      textStyle: _objectSpread(_objectSpread({}, font), {}, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n\n  return React.createElement(View, {\n    style: [containerStyle, viewStyle]\n  }, React.createElement(Underline, {\n    hasActiveOutline: hasActiveOutline,\n    parentState: parentState,\n    underlineColorCustom: underlineColorCustom,\n    error: error,\n    colors: colors,\n    activeColor: activeColor\n  }), React.createElement(View, {\n    style: [styles.labelContainer, {\n      minHeight: minHeight\n    }]\n  }, !isAndroid && multiline && !!label && React.createElement(View, {\n    testID: \"patch-container\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {\n      backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,\n      left: paddingLeft,\n      right: paddingRight\n    }]\n  }), React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps\n  }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({\n    testID: 'text-input-flat'\n  }, rest), {}, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, {\n      paddingLeft: paddingLeft,\n      paddingRight: paddingRight\n    }, !multiline || multiline && height ? {\n      height: flatHeight\n    } : {}, paddingFlat, _objectSpread(_objectSpread({}, font), {}, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n    }), Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(TextInputAdornment, adornmentProps));\n};\n\nexport default TextInputFlat;\n\nvar Underline = function Underline(_ref2) {\n  var parentState = _ref2.parentState,\n      error = _ref2.error,\n      colors = _ref2.colors,\n      activeColor = _ref2.activeColor,\n      underlineColorCustom = _ref2.underlineColorCustom,\n      hasActiveOutline = _ref2.hasActiveOutline;\n\n  var _useTheme = useTheme(),\n      isV3 = _useTheme.isV3;\n\n  var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors === null || colors === void 0 ? void 0 : colors.error;\n  var activeScale = isV3 ? 2 : 1;\n  return React.createElement(Animated.View, {\n    style: [styles.underline, isV3 && styles.md3Underline, {\n      backgroundColor: backgroundColor,\n      transform: [{\n        scaleY: (isV3 ? hasActiveOutline : parentState.focused) ? activeScale : 0.5\n      }]\n    }]\n  });\n};\n\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1\n  },\n  md3Underline: {\n    height: 1\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2\n  }\n});","map":{"version":3,"sources":["TextInputFlat.tsx"],"names":["TextInputFlat","disabled","editable","error","render","props","multiline","rest","isAndroid","Platform","roundness","font","theme","hasActiveOutline","parentState","MIN_HEIGHT","getConstants","fontSize","viewStyle","StyleSheet","fontSizeStyle","isPaddingHorizontalPassed","paddingHorizontal","adornmentConfig","getAdornmentConfig","left","right","paddingRight","calculateFlatInputHorizontalPadding","isV3","paddingLeft","rightLayout","rightAffixWidth","leftAffixWidth","leftLayout","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","inputOffset","mode","InputMode","backgroundColor","getFlatInputColors","underlineColor","activeUnderlineColor","containerStyle","borderTopLeftRadius","borderTopRightRadius","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","minInputHeight","dense","label","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","scale","styles","pad","calculatePadding","paddingFlat","adjustPaddingFlat","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","calculateFlatAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","onLayoutAnimatedText","placeholderStyle","fontWeight","wiggleOffsetX","paddingOffset","activeColor","placeholderColor","errorColor","maxFontSizeMultiplier","affixTopPosition","AdornmentSide","onAffixChange","onRightAffixLayoutChange","adornmentProps","forceFocus","AdornmentType","isTextInputFocused","textStyle","visible","labeled","testID","ref","onChangeText","placeholder","placeholderTextColor","selectionColor","onFocus","onBlur","underlineColorAndroid","style","color","textAlignVertical","textAlign","outline","Underline","useTheme","colors","activeScale","transform","scaleY","position","underline","bottom","zIndex","md3Underline","labelContainer","paddingTop","paddingBottom","input","flexGrow","margin","inputFlat","inputFlatDense","patchContainer","densePatchContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport type { RenderProps, ChildTextInputProps } from './types';\nimport { useTheme } from '../../core/theming';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  MINIMIZED_LABEL_Y_OFFSET,\n  LABEL_PADDING_TOP_DENSE,\n  MIN_DENSE_HEIGHT_WL,\n  MIN_DENSE_HEIGHT,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n  getFlatInputColors,\n  getConstants,\n} from './helpers';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\n\nconst TextInputFlat = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor,\n  activeUnderlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const isAndroid = Platform.OS === 'android';\n  const { colors, isV3, roundness } = theme;\n  const font = !isV3 ? theme.fonts.regular : {};\n  const hasActiveOutline = parentState.focused || error;\n\n  const { LABEL_PADDING_TOP, FLAT_INPUT_OFFSET, MIN_HEIGHT } =\n    getConstants(isV3);\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const isPaddingHorizontalPassed =\n    paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right,\n  });\n\n  let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n    adornmentConfig,\n    isV3,\n  });\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal as number;\n    paddingRight = paddingHorizontal as number;\n  }\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      paddingHorizontal,\n      inputOffset: FLAT_INPUT_OFFSET,\n      mode: InputMode.Flat,\n      isV3,\n    });\n\n  const {\n    inputTextColor,\n    activeColor,\n    underlineColorCustom,\n    placeholderColor,\n    errorColor,\n    backgroundColor,\n  } = getFlatInputColors({\n    underlineColor,\n    activeUnderlineColor,\n    disabled,\n    error,\n    theme,\n  });\n\n  const containerStyle = {\n    backgroundColor,\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness,\n  };\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth - (labelScale * labelWidth) / 2) +\n    (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n\n  const minInputHeight = dense\n    ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE\n    : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(\n      dense ? styles.inputFlatDense : styles.inputFlat\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingFlat = adjustPaddingFlat({\n    ...paddingSettings,\n    pad,\n  });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const minHeight =\n    height ||\n    (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n  const flatHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n  const leftAffixTopPosition = leftLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: leftLayout.height,\n      })\n    : null;\n\n  const rightAffixTopPosition = rightLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: rightLayout.height,\n      })\n    : null;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingOffset: { paddingLeft, paddingRight },\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={[containerStyle, viewStyle]}>\n      <Underline\n        hasActiveOutline={hasActiveOutline}\n        parentState={parentState}\n        underlineColorCustom={underlineColorCustom}\n        error={error}\n        colors={colors}\n        activeColor={activeColor}\n      />\n      <View\n        style={[\n          styles.labelContainer,\n          {\n            minHeight,\n          },\n        ]}\n      >\n        {!isAndroid && multiline && !!label && (\n          // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n          // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n          <View\n            testID=\"patch-container\"\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              dense ? styles.densePatchContainer : styles.patchContainer,\n              {\n                backgroundColor:\n                  viewStyle.backgroundColor || containerStyle.backgroundColor,\n                left: paddingLeft,\n                right: paddingRight,\n              },\n            ]}\n          />\n        )}\n        <InputLabel parentState={parentState} labelProps={labelProps} />\n        {render?.({\n          testID: 'text-input-flat',\n          ...rest,\n          ref: innerRef,\n          onChangeText,\n          placeholder: label ? parentState.placeholder : rest.placeholder,\n          placeholderTextColor: placeholderTextColor ?? placeholderColor,\n          editable: !disabled && editable,\n          selectionColor:\n            typeof selectionColor === 'undefined'\n              ? activeColor\n              : selectionColor,\n          onFocus,\n          onBlur,\n          underlineColorAndroid: 'transparent',\n          multiline,\n          style: [\n            styles.input,\n            { paddingLeft, paddingRight },\n            !multiline || (multiline && height) ? { height: flatHeight } : {},\n            paddingFlat,\n            {\n              ...font,\n              fontSize,\n              fontWeight,\n              color: inputTextColor,\n              textAlignVertical: multiline ? 'top' : 'center',\n              textAlign: textAlign\n                ? textAlign\n                : I18nManager.isRTL\n                ? 'right'\n                : 'left',\n            },\n            Platform.OS === 'web' && { outline: 'none' },\n            adornmentStyleAdjustmentForNativeInput,\n          ],\n        })}\n      </View>\n      <TextInputAdornment {...adornmentProps} />\n    </View>\n  );\n};\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors?: {\n    error?: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n  hasActiveOutline?: boolean;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n  hasActiveOutline,\n}: UnderlineProps) => {\n  const { isV3 } = useTheme();\n\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n\n  if (error) backgroundColor = colors?.error;\n\n  const activeScale = isV3 ? 2 : 1;\n\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        isV3 && styles.md3Underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [\n            {\n              scaleY: (isV3 ? hasActiveOutline : parentState.focused)\n                ? activeScale\n                : 0.5,\n            },\n          ],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1,\n  },\n  md3Underline: {\n    height: 1,\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2,\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}